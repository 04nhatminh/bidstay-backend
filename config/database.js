require('dotenv').config();
const mysql = require('mysql2/promise');
const { spawn } = require('child_process');
const path = require('path');
const { create } = require('domain');

const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 3308,
    password: process.env.DB_PASSWORD || '22127007', 
    database: process.env.DB_NAME || 'a2airbnb',
    multipleStatements: true,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
    supportBigNumbers: true,
    bigNumberStrings: true
};

console.log('üîç Database config:', {
    host: dbConfig.host,
    user: dbConfig.user,
    port: dbConfig.port,
    password: dbConfig.password ? '***hidden***' : 'empty',
    database: dbConfig.database
});

const pool = mysql.createPool(dbConfig);

pool.on('connection', (conn) => {
  conn.query("SET time_zone = '+07:00'");
  conn.query("SET SESSION sql_mode = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,ONLY_FULL_GROUP_BY'");
});

async function testConnection() {
    try {
        const connection = await pool.getConnection();
        console.log('‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!');
        connection.release();
    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MySQL:', error.message);
    }
}

async function createSystemParametersTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS SystemParameters (
            ParamID INT PRIMARY KEY AUTO_INCREMENT,
            ParamName VARCHAR(255) NOT NULL,
            ParamValue VARCHAR(255) NOT NULL
        )
    `);
}

async function createAdministrativeRegionsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS AdministrativeRegions (
            RegionID INT PRIMARY KEY,
            Name VARCHAR(255) NOT NULL,
            NameEn VARCHAR(255) NOT NULL,
            CodeName VARCHAR(255),
            CodeNameEn VARCHAR(255)
        )
    `);

    await pool.execute(`
        INSERT INTO AdministrativeRegions(RegionID, Name, NameEn, CodeName, CodeNameEn) 
        VALUES(1,'ƒê√¥ng B·∫Øc B·ªô','Northeast','dong_bac_bo','northest'),
        (2,'T√¢y B·∫Øc B·ªô','Northwest','tay_bac_bo','northwest'),
        (3,'ƒê·ªìng b·∫±ng s√¥ng H·ªìng','Red River Delta','dong_bang_song_hong','red_river_delta'),
        (4,'B·∫Øc Trung B·ªô','North Central Coast','bac_trung_bo','north_central_coast'),
        (5,'Duy√™n h·∫£i Nam Trung B·ªô','South Central Coast','duyen_hai_nam_trung_bo','south_central_coast'),
        (6,'T√¢y Nguy√™n','Central Highlands','tay_nguyen','central_highlands'),
        (7,'ƒê√¥ng Nam B·ªô','Southeast','dong_nam_bo','southeast'),
        (8,'ƒê·ªìng b·∫±ng s√¥ng C·ª≠u Long','Mekong River Delta','dong_bang_song_cuu_long','southwest')
        ON DUPLICATE KEY UPDATE
            Name = VALUES(Name),
            NameEn = VALUES(NameEn),
            CodeName = VALUES(CodeName),
            CodeNameEn = VALUES(CodeNameEn)
    `);
}

async function createAdministrativeUnitsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS AdministrativeUnits (
            UnitID INT PRIMARY KEY,
            FullName VARCHAR(255),
            FullNameEn VARCHAR(255),
            ShortName VARCHAR(255),
            ShortNameEn VARCHAR(255),
            CodeName VARCHAR(255),
            CodeNameEn VARCHAR(255)
        )
    `);

    await pool.execute(`
        INSERT INTO AdministrativeUnits(UnitID, FullName, FullNameEn, ShortName, ShortNameEn, CodeName, CodeNameEn) VALUES
        (1,'Th√†nh ph·ªë tr·ª±c thu·ªôc trung ∆∞∆°ng','Municipality','Th√†nh ph·ªë','City','thanh_pho_truc_thuoc_trung_uong','municipality'),
        (2,'T·ªânh','Province','T·ªânh','Province','tinh','province'),
        (3,'Th√†nh ph·ªë thu·ªôc th√†nh ph·ªë tr·ª±c thu·ªôc trung ∆∞∆°ng','Municipal city','Th√†nh ph·ªë','City','thanh_pho_thuoc_thanh_pho_truc_thuoc_trung_uong','municipal_city'),
        (4,'Th√†nh ph·ªë thu·ªôc t·ªânh','Provincial city','Th√†nh ph·ªë','City','thanh_pho_thuoc_tinh','provincial_city'),
        (5,'Qu·∫≠n','Urban district','Qu·∫≠n','District','quan','urban_district'),
        (6,'Th·ªã x√£','District-level town','Th·ªã x√£','Town','thi_xa','district_level_town'),
        (7,'Huy·ªán','District','Huy·ªán','District','huyen','district'),
        (8,'Ph∆∞·ªùng','Ward','Ph∆∞·ªùng','Ward','phuong','ward'),
        (9,'Th·ªã tr·∫•n','Commune-level town','Th·ªã tr·∫•n','Township','thi_tran','commune_level_town'),
        (10,'X√£','Commune','X√£','Commune','xa','commune')
        ON DUPLICATE KEY UPDATE
            FullName = VALUES(FullName),
            FullNameEn = VALUES(FullNameEn),
            ShortName = VALUES(ShortName),
            ShortNameEn = VALUES(ShortNameEn),
            CodeName = VALUES(CodeName),
            CodeNameEn = VALUES(CodeNameEn)
    `);
}

async function createProvincesTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Provinces (
            ProvinceCode VARCHAR(20) PRIMARY KEY,
            Name VARCHAR(255) NOT NULL,
            NameEn VARCHAR(255),
            FullName VARCHAR(255),
            FullNameEn VARCHAR(255),
            CodeName VARCHAR(255),
            AdministrativeUnitID INT,
            AdministrativeRegionID INT,
            FOREIGN KEY (AdministrativeUnitID) REFERENCES AdministrativeUnits(UnitID),
            FOREIGN KEY (AdministrativeRegionID) REFERENCES AdministrativeRegions(RegionID)
        )
    `);

    await pool.execute(`
        INSERT INTO Provinces(ProvinceCode, Name, NameEn, FullName, FullNameEn, CodeName, AdministrativeUnitID, AdministrativeRegionID) VALUES
            ('01','H√† N·ªôi','Ha Noi','Th√†nh ph·ªë H√† N·ªôi','Ha Noi City','ha_noi',1,3),
            ('02','H√† Giang','Ha Giang','T·ªânh H√† Giang','Ha Giang Province','ha_giang',2,1),
            ('04','Cao B·∫±ng','Cao Bang','T·ªânh Cao B·∫±ng','Cao Bang Province','cao_bang',2,1),
            ('06','B·∫Øc K·∫°n','Bac Kan','T·ªânh B·∫Øc K·∫°n','Bac Kan Province','bac_kan',2,1),
            ('08','Tuy√™n Quang','Tuyen Quang','T·ªânh Tuy√™n Quang','Tuyen Quang Province','tuyen_quang',2,1),
            ('10','L√†o Cai','Lao Cai','T·ªânh L√†o Cai','Lao Cai Province','lao_cai',2,2),
            ('11','ƒêi·ªán Bi√™n','Dien Bien','T·ªânh ƒêi·ªán Bi√™n','Dien Bien Province','dien_bien',2,2),
            ('12','Lai Ch√¢u','Lai Chau','T·ªânh Lai Ch√¢u','Lai Chau Province','lai_chau',2,2),
            ('14','S∆°n La','Son La','T·ªânh S∆°n La','Son La Province','son_la',2,2),
            ('15','Y√™n B√°i','Yen Bai','T·ªânh Y√™n B√°i','Yen Bai Province','yen_bai',2,2),
            ('17','H√≤a B√¨nh','Hoa Binh','T·ªânh H√≤a B√¨nh','Hoa Binh Province','hoa_binh',2,2),
            ('19','Th√°i Nguy√™n','Thai Nguyen','T·ªânh Th√°i Nguy√™n','Thai Nguyen Province','thai_nguyen',2,1),
            ('20','L·∫°ng S∆°n','Lang Son','T·ªânh L·∫°ng S∆°n','Lang Son Province','lang_son',2,1),
            ('22','Qu·∫£ng Ninh','Quang Ninh','T·ªânh Qu·∫£ng Ninh','Quang Ninh Province','quang_ninh',2,1),
            ('24','B·∫Øc Giang','Bac Giang','T·ªânh B·∫Øc Giang','Bac Giang Province','bac_giang',2,1),
            ('25','Ph√∫ Th·ªç','Phu Tho','T·ªânh Ph√∫ Th·ªç','Phu Tho Province','phu_tho',2,1),
            ('26','Vƒ©nh Ph√∫c','Vinh Phuc','T·ªânh Vƒ©nh Ph√∫c','Vinh Phuc Province','vinh_phuc',2,3),
            ('27','B·∫Øc Ninh','Bac Ninh','T·ªânh B·∫Øc Ninh','Bac Ninh Province','bac_ninh',2,3),
            ('30','H·∫£i D∆∞∆°ng','Hai Duong','T·ªânh H·∫£i D∆∞∆°ng','Hai Duong Province','hai_duong',2,3),
            ('31','H·∫£i Ph√≤ng','Hai Phong','Th√†nh ph·ªë H·∫£i Ph√≤ng','Hai Phong City','hai_phong',1,3),
            ('33','H∆∞ng Y√™n','Hung Yen','T·ªânh H∆∞ng Y√™n','Hung Yen Province','hung_yen',2,3),
            ('34','Th√°i B√¨nh','Thai Binh','T·ªânh Th√°i B√¨nh','Thai Binh Province','thai_binh',2,3),
            ('35','H√† Nam','Ha Nam','T·ªânh H√† Nam','Ha Nam Province','ha_nam',2,3),
            ('36','Nam ƒê·ªãnh','Nam Dinh','T·ªânh Nam ƒê·ªãnh','Nam Dinh Province','nam_dinh',2,3),
            ('37','Ninh B√¨nh','Ninh Binh','T·ªânh Ninh B√¨nh','Ninh Binh Province','ninh_binh',2,3),
            ('38','Thanh H√≥a','Thanh Hoa','T·ªânh Thanh H√≥a','Thanh Hoa Province','thanh_hoa',2,4),
            ('40','Ngh·ªá An','Nghe An','T·ªânh Ngh·ªá An','Nghe An Province','nghe_an',2,4),
            ('42','H√† Tƒ©nh','Ha Tinh','T·ªânh H√† Tƒ©nh','Ha Tinh Province','ha_tinh',2,4),
            ('44','Qu·∫£ng B√¨nh','Quang Binh','T·ªânh Qu·∫£ng B√¨nh','Quang Binh Province','quang_binh',2,4),
            ('45','Qu·∫£ng Tr·ªã','Quang Tri','T·ªânh Qu·∫£ng Tr·ªã','Quang Tri Province','quang_tri',2,4),
            ('46','Hu·∫ø','Hue','Th√†nh ph·ªë Hu·∫ø','Hue City','hue',1,4),
            ('48','ƒê√† N·∫µng','Da Nang','Th√†nh ph·ªë ƒê√† N·∫µng','Da Nang City','da_nang',1,5),
            ('49','Qu·∫£ng Nam','Quang Nam','T·ªânh Qu·∫£ng Nam','Quang Nam Province','quang_nam',2,5),
            ('51','Qu·∫£ng Ng√£i','Quang Ngai','T·ªânh Qu·∫£ng Ng√£i','Quang Ngai Province','quang_ngai',2,5),
            ('52','B√¨nh ƒê·ªãnh','Binh Dinh','T·ªânh B√¨nh ƒê·ªãnh','Binh Dinh Province','binh_dinh',2,5),
            ('54','Ph√∫ Y√™n','Phu Yen','T·ªânh Ph√∫ Y√™n','Phu Yen Province','phu_yen',2,5),
            ('56','Kh√°nh H√≤a','Khanh Hoa','T·ªânh Kh√°nh H√≤a','Khanh Hoa Province','khanh_hoa',2,5),
            ('58','Ninh Thu·∫≠n','Ninh Thuan','T·ªânh Ninh Thu·∫≠n','Ninh Thuan Province','ninh_thuan',2,5),
            ('60','B√¨nh Thu·∫≠n','Binh Thuan','T·ªânh B√¨nh Thu·∫≠n','Binh Thuan Province','binh_thuan',2,5),
            ('62','Kon Tum','Kon Tum','T·ªânh Kon Tum','Kon Tum Province','kon_tum',2,6),
            ('64','Gia Lai','Gia Lai','T·ªânh Gia Lai','Gia Lai Province','gia_lai',2,6),
            ('66','ƒê·∫Øk L·∫Øk','Dak Lak','T·ªânh ƒê·∫Øk L·∫Øk','Dak Lak Province','dak_lak',2,6),
            ('67','ƒê·∫Øk N√¥ng','Dak Nong','T·ªânh ƒê·∫Øk N√¥ng','Dak Nong Province','dak_nong',2,6),
            ('68','L√¢m ƒê·ªìng','Lam Dong','T·ªânh L√¢m ƒê·ªìng','Lam Dong Province','lam_dong',2,6),
            ('70','B√¨nh Ph∆∞·ªõc','Binh Phuoc','T·ªânh B√¨nh Ph∆∞·ªõc','Binh Phuoc Province','binh_phuoc',2,7),
            ('72','T√¢y Ninh','Tay Ninh','T·ªânh T√¢y Ninh','Tay Ninh Province','tay_ninh',2,7),
            ('74','B√¨nh D∆∞∆°ng','Binh Duong','T·ªânh B√¨nh D∆∞∆°ng','Binh Duong Province','binh_duong',2,7),
            ('75','ƒê·ªìng Nai','Dong Nai','T·ªânh ƒê·ªìng Nai','Dong Nai Province','dong_nai',2,7),
            ('77','B√† R·ªãa - V≈©ng T√†u','Ba Ria - Vung Tau','T·ªânh B√† R·ªãa - V≈©ng T√†u','Ba Ria - Vung Tau Province','ba_ria_vung_tau',2,7),
            ('79','H·ªì Ch√≠ Minh','Ho Chi Minh','Th√†nh ph·ªë H·ªì Ch√≠ Minh','Ho Chi Minh City','ho_chi_minh',1,7),
            ('80','Long An','Long An','T·ªânh Long An','Long An Province','long_an',2,8),
            ('82','Ti·ªÅn Giang','Tien Giang','T·ªânh Ti·ªÅn Giang','Tien Giang Province','tien_giang',2,8),
            ('83','B·∫øn Tre','Ben Tre','T·ªânh B·∫øn Tre','Ben Tre Province','ben_tre',2,8),
            ('84','Tr√† Vinh','Tra Vinh','T·ªânh Tr√† Vinh','Tra Vinh Province','tra_vinh',2,8),
            ('86','Vƒ©nh Long','Vinh Long','T·ªânh Vƒ©nh Long','Vinh Long Province','vinh_long',2,8),
            ('87','ƒê·ªìng Th√°p','Dong Thap','T·ªânh ƒê·ªìng Th√°p','Dong Thap Province','dong_thap',2,8),
            ('89','An Giang','An Giang','T·ªânh An Giang','An Giang Province','an_giang',2,8),
            ('91','Ki√™n Giang','Kien Giang','T·ªânh Ki√™n Giang','Kien Giang Province','kien_giang',2,8),
            ('92','C·∫ßn Th∆°','Can Tho','Th√†nh ph·ªë C·∫ßn Th∆°','Can Tho City','can_tho',1,8),
            ('93','H·∫≠u Giang','Hau Giang','T·ªânh H·∫≠u Giang','Hau Giang Province','hau_giang',2,8),
            ('94','S√≥c TrƒÉng','Soc Trang','T·ªânh S√≥c TrƒÉng','Soc Trang Province','soc_trang',2,8),
            ('95','B·∫°c Li√™u','Bac Lieu','T·ªânh B·∫°c Li√™u','Bac Lieu Province','bac_lieu',2,8),
            ('96','C√† Mau','Ca Mau','T·ªânh C√† Mau','Ca Mau Province','ca_mau',2,8) 
            ON DUPLICATE KEY UPDATE Name=VALUES(Name);
    `);
    
    // T·∫°o index v·ªõi error handling
    try {
        await pool.execute(`CREATE INDEX idx_Provinces_Region ON Provinces(AdministrativeRegionID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') {
            throw error; // Re-throw n·∫øu kh√¥ng ph·∫£i l·ªói duplicate key
        }
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_Provinces_Unit ON Provinces(AdministrativeUnitID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') {
            throw error;
        }
    }
}

async function createDistrictsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Districts (
            DistrictCode VARCHAR(20) PRIMARY KEY,
            Name VARCHAR(255) NOT NULL,
            NameEn VARCHAR(255),
            FullName VARCHAR(255),
            FullNameEn VARCHAR(255),
            CodeName VARCHAR(255),
            ProvinceCode VARCHAR(20),
            AdministrativeUnitID INT,
            FOREIGN KEY (ProvinceCode) REFERENCES Provinces(ProvinceCode),
            FOREIGN KEY (AdministrativeUnitID) REFERENCES AdministrativeUnits(UnitID)
        )
    `);
    
    // Chia th√†nh nhi·ªÅu l·∫ßn INSERT ƒë·ªÉ tr√°nh qu√° gi·ªõi h·∫°n c√¢u l·ªánh
    await pool.execute(`
        INSERT INTO Districts(DistrictCode, Name, NameEn, FullName, FullNameEn, CodeName, ProvinceCode, AdministrativeUnitID) VALUES
            ('001','Ba ƒê√¨nh','Ba Dinh','Qu·∫≠n Ba ƒê√¨nh','Ba Dinh District','ba_dinh','01',5),
            ('002','Ho√†n Ki·∫øm','Hoan Kiem','Qu·∫≠n Ho√†n Ki·∫øm','Hoan Kiem District','hoan_kiem','01',5),
            ('003','T√¢y H·ªì','Tay Ho','Qu·∫≠n T√¢y H·ªì','Tay Ho District','tay_ho','01',5),
            ('004','Long Bi√™n','Long Bien','Qu·∫≠n Long Bi√™n','Long Bien District','long_bien','01',5),
            ('005','C·∫ßu Gi·∫•y','Cau Giay','Qu·∫≠n C·∫ßu Gi·∫•y','Cau Giay District','cau_giay','01',5),
            ('006','ƒê·ªëng ƒêa','Dong Da','Qu·∫≠n ƒê·ªëng ƒêa','Dong Da District','dong_da','01',5),
            ('007','Hai B√† Tr∆∞ng','Hai Ba Trung','Qu·∫≠n Hai B√† Tr∆∞ng','Hai Ba Trung District','hai_ba_trung','01',5),
            ('008','Ho√†ng Mai','Hoang Mai','Qu·∫≠n Ho√†ng Mai','Hoang Mai District','hoang_mai','01',5),
            ('009','Thanh Xu√¢n','Thanh Xuan','Qu·∫≠n Thanh Xu√¢n','Thanh Xuan District','thanh_xuan','01',5),
            ('016','S√≥c S∆°n','Soc Son','Huy·ªán S√≥c S∆°n','Soc Son District','soc_son','01',7),
            ('017','ƒê√¥ng Anh','Dong Anh','Huy·ªán ƒê√¥ng Anh','Dong Anh District','dong_anh','01',7),
            ('018','Gia L√¢m','Gia Lam','Huy·ªán Gia L√¢m','Gia Lam District','gia_lam','01',7),
            ('019','Nam T·ª´ Li√™m','Nam Tu Liem','Qu·∫≠n Nam T·ª´ Li√™m','Nam Tu Liem District','nam_tu_liem','01',5),
            ('020','Thanh Tr√¨','Thanh Tri','Huy·ªán Thanh Tr√¨','Thanh Tri District','thanh_tri','01',7),
            ('021','B·∫Øc T·ª´ Li√™m','Bac Tu Liem','Qu·∫≠n B·∫Øc T·ª´ Li√™m','Bac Tu Liem District','bac_tu_liem','01',5),
            ('250','M√™ Linh','Me Linh','Huy·ªán M√™ Linh','Me Linh District','me_linh','01',7),
            ('268','H√† ƒê√¥ng','Ha Dong','Qu·∫≠n H√† ƒê√¥ng','Ha Dong District','ha_dong','01',5),
            ('269','S∆°n T√¢y','Son Tay','Th·ªã x√£ S∆°n T√¢y','Son Tay Town','son_tay','01',6),
            ('271','Ba V√¨','Ba Vi','Huy·ªán Ba V√¨','Ba Vi District','ba_vi','01',7),
            ('272','Ph√∫c Th·ªç','Phuc Tho','Huy·ªán Ph√∫c Th·ªç','Phuc Tho District','phuc_tho','01',7),
            ('273','ƒêan Ph∆∞·ª£ng','Dan Phuong','Huy·ªán ƒêan Ph∆∞·ª£ng','Dan Phuong District','dan_phuong','01',7),
            ('274','Ho√†i ƒê·ª©c','Hoai Duc','Huy·ªán Ho√†i ƒê·ª©c','Hoai Duc District','hoai_duc','01',7),
            ('275','Qu·ªëc Oai','Quoc Oai','Huy·ªán Qu·ªëc Oai','Quoc Oai District','quoc_oai','01',7),
            ('276','Th·∫°ch Th·∫•t','Thach That','Huy·ªán Th·∫°ch Th·∫•t','Thach That District','thach_that','01',7),
            ('277','Ch∆∞∆°ng M·ªπ','Chuong My','Huy·ªán Ch∆∞∆°ng M·ªπ','Chuong My District','chuong_my','01',7),
            ('278','Thanh Oai','Thanh Oai','Huy·ªán Thanh Oai','Thanh Oai District','thanh_oai','01',7),
            ('279','Th∆∞·ªùng T√≠n','Thuong Tin','Huy·ªán Th∆∞·ªùng T√≠n','Thuong Tin District','thuong_tin','01',7),
            ('280','Ph√∫ Xuy√™n','Phu Xuyen','Huy·ªán Ph√∫ Xuy√™n','Phu Xuyen District','phu_xuyen','01',7),
            ('281','·ª®ng H√≤a','Ung Hoa','Huy·ªán ·ª®ng H√≤a','Ung Hoa District','ung_hoa','01',7),
            ('282','M·ªπ ƒê·ª©c','My Duc','Huy·ªán M·ªπ ƒê·ª©c','My Duc District','my_duc','01',7),
            ('024','H√† Giang','Ha Giang','Th√†nh ph·ªë H√† Giang','Ha Giang City','ha_giang','02',4),
            ('026','ƒê·ªìng VƒÉn','Dong Van','Huy·ªán ƒê·ªìng VƒÉn','Dong Van District','dong_van','02',7),
            ('027','M√®o V·∫°c','Meo Vac','Huy·ªán M√®o V·∫°c','Meo Vac District','meo_vac','02',7),
            ('028','Y√™n Minh','Yen Minh','Huy·ªán Y√™n Minh','Yen Minh District','yen_minh','02',7),
            ('029','Qu·∫£n B·∫°','Quan Ba','Huy·ªán Qu·∫£n B·∫°','Quan Ba District','quan_ba','02',7),
            ('030','V·ªã Xuy√™n','Vi Xuyen','Huy·ªán V·ªã Xuy√™n','Vi Xuyen District','vi_xuyen','02',7),
            ('031','B·∫Øc M√™','Bac Me','Huy·ªán B·∫Øc M√™','Bac Me District','bac_me','02',7),
            ('032','Ho√†ng Su Ph√¨','Hoang Su Phi','Huy·ªán Ho√†ng Su Ph√¨','Hoang Su Phi District','hoang_su_phi','02',7),
            ('033','X√≠n M·∫ßn','Xin Man','Huy·ªán X√≠n M·∫ßn','Xin Man District','xin_man','02',7),
            ('034','B·∫Øc Quang','Bac Quang','Huy·ªán B·∫Øc Quang','Bac Quang District','bac_quang','02',7),
            ('035','Quang B√¨nh','Quang Binh','Huy·ªán Quang B√¨nh','Quang Binh District','quang_binh','02',7),
            ('040','Cao B·∫±ng','Cao Bang','Th√†nh ph·ªë Cao B·∫±ng','Cao Bang City','cao_bang','04',4),
            ('042','B·∫£o L√¢m','Bao Lam','Huy·ªán B·∫£o L√¢m','Bao Lam District','bao_lam','04',7),
            ('043','B·∫£o L·∫°c','Bao Lac','Huy·ªán B·∫£o L·∫°c','Bao Lac District','bao_lac','04',7),
            ('045','H√† Qu·∫£ng','Ha Quang','Huy·ªán H√† Qu·∫£ng','Ha Quang District','ha_quang','04',7),
            ('047','Tr√πng Kh√°nh','Trung Khanh','Huy·ªán Tr√πng Kh√°nh','Trung Khanh District','trung_khanh','04',7),
            ('048','H·∫° Lang','Ha Lang','Huy·ªán H·∫° Lang','Ha Lang District','ha_lang','04',7),
            ('049','Qu·∫£ng H√≤a','Quang Hoa','Huy·ªán Qu·∫£ng H√≤a','Quang Hoa District','quang_hoa','04',7),
            ('051','H√≤a An','Hoa An','Huy·ªán H√≤a An','Hoa An District','hoa_an','04',7),
            ('052','Nguy√™n B√¨nh','Nguyen Binh','Huy·ªán Nguy√™n B√¨nh','Nguyen Binh District','nguyen_binh','04',7)
        ON DUPLICATE KEY UPDATE
            Name                 = VALUES(Name),
            NameEn               = VALUES(NameEn),
            FullName             = VALUES(FullName),
            FullNameEn           = VALUES(FullNameEn),
            CodeName             = VALUES(CodeName),
            ProvinceCode         = VALUES(ProvinceCode),
            AdministrativeUnitID = VALUES(AdministrativeUnitID)
    `);

    await pool.execute(`
        INSERT INTO Districts(DistrictCode, Name, NameEn, FullName, FullNameEn, CodeName, ProvinceCode, AdministrativeUnitID) VALUES
            ('053','Th·∫°ch An','Thach An','Huy·ªán Th·∫°ch An','Thach An District','thach_an','04',7),
            ('058','B·∫Øc K·∫°n','Bac Kan','Th√†nh ph·ªë B·∫Øc K·∫°n','Bac Kan City','bac_kan','06',4),
            ('060','P√°c N·∫∑m','Pac Nam','Huy·ªán P√°c N·∫∑m','Pac Nam District','pac_nam','06',7),
            ('061','Ba B·ªÉ','Ba Be','Huy·ªán Ba B·ªÉ','Ba Be District','ba_be','06',7),
            ('062','Ng√¢n S∆°n','Ngan Son','Huy·ªán Ng√¢n S∆°n','Ngan Son District','ngan_son','06',7),
            ('063','B·∫°ch Th√¥ng','Bach Thong','Huy·ªán B·∫°ch Th√¥ng','Bach Thong District','bach_thong','06',7),
            ('064','Ch·ª£ ƒê·ªìn','Cho Don','Huy·ªán Ch·ª£ ƒê·ªìn','Cho Don District','cho_don','06',7),
            ('065','Ch·ª£ M·ªõi','Cho Moi','Huy·ªán Ch·ª£ M·ªõi','Cho Moi District','cho_moi','06',7),
            ('066','Na R√¨','Na Ri','Huy·ªán Na R√¨','Na Ri District','na_ri','06',7),
            ('070','Tuy√™n Quang','Tuyen Quang','Th√†nh ph·ªë Tuy√™n Quang','Tuyen Quang City','tuyen_quang','08',4),
            ('071','L√¢m B√¨nh','Lam Binh','Huy·ªán L√¢m B√¨nh','Lam Binh District','lam_binh','08',7),
            ('072','Na Hang','Na Hang','Huy·ªán Na Hang','Na Hang District','na_hang','08',7),
            ('073','Chi√™m H√≥a','Chiem Hoa','Huy·ªán Chi√™m H√≥a','Chiem Hoa District','chiem_hoa','08',7),
            ('074','H√†m Y√™n','Ham Yen','Huy·ªán H√†m Y√™n','Ham Yen District','ham_yen','08',7),
            ('075','Y√™n S∆°n','Yen Son','Huy·ªán Y√™n S∆°n','Yen Son District','yen_son','08',7),
            ('076','S∆°n D∆∞∆°ng','Son Duong','Huy·ªán S∆°n D∆∞∆°ng','Son Duong District','son_duong','08',7),
            ('080','L√†o Cai','Lao Cai','Th√†nh ph·ªë L√†o Cai','Lao Cai City','lao_cai','10',4),
            ('082','B√°t X√°t','Bat Xat','Huy·ªán B√°t X√°t','Bat Xat District','bat_xat','10',7),
            ('083','M∆∞·ªùng Kh∆∞∆°ng','Muong Khuong','Huy·ªán M∆∞·ªùng Kh∆∞∆°ng','Muong Khuong District','muong_khuong','10',7),
            ('084','Si Ma Cai','Si Ma Cai','Huy·ªán Si Ma Cai','Si Ma Cai District','si_ma_cai','10',7),
            ('085','B·∫Øc H√†','Bac Ha','Huy·ªán B·∫Øc H√†','Bac Ha District','bac_ha','10',7),
            ('086','B·∫£o Th·∫Øng','Bao Thang','Huy·ªán B·∫£o Th·∫Øng','Bao Thang District','bao_thang','10',7),
            ('087','B·∫£o Y√™n','Bao Yen','Huy·ªán B·∫£o Y√™n','Bao Yen District','bao_yen','10',7),
            ('088','Sa Pa','Sa Pa','Th·ªã x√£ Sa Pa','Sa Pa Town','sa_pa','10',6),
            ('089','VƒÉn B√†n','Van Ban','Huy·ªán VƒÉn B√†n','Van Ban District','van_ban','10',7),
            ('094','ƒêi·ªán Bi√™n Ph·ªß','Dien Bien Phu','Th√†nh ph·ªë ƒêi·ªán Bi√™n Ph·ªß','Dien Bien Phu City','dien_bien_phu','11',4),
            ('095','M∆∞·ªùng Lay','Muong Lay','Th·ªã x√£ M∆∞·ªùng Lay','Muong Lay Town','muong_lay','11',6),
            ('096','M∆∞·ªùng Nh√©','Muong Nhe','Huy·ªán M∆∞·ªùng Nh√©','Muong Nhe District','muong_nhe','11',7),
            ('097','M∆∞·ªùng Ch√†','Muong Cha','Huy·ªán M∆∞·ªùng Ch√†','Muong Cha District','muong_cha','11',7),
            ('098','T·ªßa Ch√πa','Tua Chua','Huy·ªán T·ªßa Ch√πa','Tua Chua District','tua_chua','11',7),
            ('099','Tu·∫ßn Gi√°o','Tuan Giao','Huy·ªán Tu·∫ßn Gi√°o','Tuan Giao District','tuan_giao','11',7),
            ('100','ƒêi·ªán Bi√™n','Dien Bien','Huy·ªán ƒêi·ªán Bi√™n','Dien Bien District','dien_bien','11',7),
            ('101','ƒêi·ªán Bi√™n ƒê√¥ng','Dien Bien Dong','Huy·ªán ƒêi·ªán Bi√™n ƒê√¥ng','Dien Bien Dong District','dien_bien_dong','11',7),
            ('102','M∆∞·ªùng ·∫¢ng','Muong Ang','Huy·ªán M∆∞·ªùng ·∫¢ng','Muong Ang District','muong_ang','11',7),
            ('103','N·∫≠m P·ªì','Nam Po','Huy·ªán N·∫≠m P·ªì','Nam Po District','nam_po','11',7),
            ('105','Lai Ch√¢u','Lai Chau','Th√†nh ph·ªë Lai Ch√¢u','Lai Chau City','lai_chau','12',4),
            ('106','Tam ƒê∆∞·ªùng','Tam Duong','Huy·ªán Tam ƒê∆∞·ªùng','Tam Duong District','tam_duong','12',7),
            ('107','M∆∞·ªùng T√®','Muong Te','Huy·ªán M∆∞·ªùng T√®','Muong Te District','muong_te','12',7),
            ('108','S√¨n H·ªì','Sin Ho','Huy·ªán S√¨n H·ªì','Sin Ho District','sin_ho','12',7),
            ('109','Phong Th·ªï','Phong Tho','Huy·ªán Phong Th·ªï','Phong Tho District','phong_tho','12',7),
            ('110','Than Uy√™n','Than Uyen','Huy·ªán Than Uy√™n','Than Uyen District','than_uyen','12',7),
            ('111','T√¢n Uy√™n','Tan Uyen','Huy·ªán T√¢n Uy√™n','Tan Uyen District','tan_uyen','12',7),
            ('112','N·∫≠m Nh√πn','Nam Nhun','Huy·ªán N·∫≠m Nh√πn','Nam Nhun District','nam_nhun','12',7),
            ('116','S∆°n La','Son La','Th√†nh ph·ªë S∆°n La','Son La City','son_la','14',4),
            ('118','Qu·ª≥nh Nhai','Quynh Nhai','Huy·ªán Qu·ª≥nh Nhai','Quynh Nhai District','quynh_nhai','14',7),
            ('119','Thu·∫≠n Ch√¢u','Thuan Chau','Huy·ªán Thu·∫≠n Ch√¢u','Thuan Chau District','thuan_chau','14',7),
            ('120','M∆∞·ªùng La','Muong La','Huy·ªán M∆∞·ªùng La','Muong La District','muong_la','14',7),
            ('121','B·∫Øc Y√™n','Bac Yen','Huy·ªán B·∫Øc Y√™n','Bac Yen District','bac_yen','14',7),
            ('122','Ph√π Y√™n','Phu Yen','Huy·ªán Ph√π Y√™n','Phu Yen District','phu_yen','14',7),
            ('123','M·ªôc Ch√¢u','Moc Chau','Th·ªã x√£ M·ªôc Ch√¢u','Moc Chau Town','moc_chau','14',6),
            ('124','Y√™n Ch√¢u','Yen Chau','Huy·ªán Y√™n Ch√¢u','Yen Chau District','yen_chau','14',7),
            ('125','Mai S∆°n','Mai Son','Huy·ªán Mai S∆°n','Mai Son District','mai_son','14',7),
            ('126','S√¥ng M√£','Song Ma','Huy·ªán S√¥ng M√£','Song Ma District','song_ma','14',7),
            ('127','S·ªëp C·ªôp','Sop Cop','Huy·ªán S·ªëp C·ªôp','Sop Cop District','sop_cop','14',7),
            ('128','V√¢n H·ªì','Van Ho','Huy·ªán V√¢n H·ªì','Van Ho District','van_ho','14',7),
            ('132','Y√™n B√°i','Yen Bai','Th√†nh ph·ªë Y√™n B√°i','Yen Bai City','yen_bai','15',4),
            ('133','Nghƒ©a L·ªô','Nghia Lo','Th·ªã x√£ Nghƒ©a L·ªô','Nghia Lo Town','nghia_lo','15',6),
            ('135','L·ª•c Y√™n','Luc Yen','Huy·ªán L·ª•c Y√™n','Luc Yen District','luc_yen','15',7),
            ('136','VƒÉn Y√™n','Van Yen','Huy·ªán VƒÉn Y√™n','Van Yen District','van_yen','15',7),
            ('137','M√π CƒÉng Ch·∫£i','Mu Cang Chai','Huy·ªán M√π CƒÉng Ch·∫£i','Mu Cang Chai District','mu_cang_chai','15',7),
            ('138','Tr·∫•n Y√™n','Tran Yen','Huy·ªán Tr·∫•n Y√™n','Tran Yen District','tran_yen','15',7),
            ('139','Tr·∫°m T·∫•u','Tram Tau','Huy·ªán Tr·∫°m T·∫•u','Tram Tau District','tram_tau','15',7),
            ('140','VƒÉn Ch·∫•n','Van Chan','Huy·ªán VƒÉn Ch·∫•n','Van Chan District','van_chan','15',7),
            ('141','Y√™n B√¨nh','Yen Binh','Huy·ªán Y√™n B√¨nh','Yen Binh District','yen_binh','15',7),
            ('148','H√≤a B√¨nh','Hoa Binh','Th√†nh ph·ªë H√≤a B√¨nh','Hoa Binh City','hoa_binh','17',4),
            ('150','ƒê√† B·∫Øc','Da Bac','Huy·ªán ƒê√† B·∫Øc','Da Bac District','da_bac','17',7),
            ('152','L∆∞∆°ng S∆°n','Luong Son','Huy·ªán L∆∞∆°ng S∆°n','Luong Son District','luong_son','17',7),
            ('153','Kim B√¥i','Kim Boi','Huy·ªán Kim B√¥i','Kim Boi District','kim_boi','17',7),
            ('154','Cao Phong','Cao Phong','Huy·ªán Cao Phong','Cao Phong District','cao_phong','17',7),
            ('155','T√¢n L·∫°c','Tan Lac','Huy·ªán T√¢n L·∫°c','Tan Lac District','tan_lac','17',7),
            ('156','Mai Ch√¢u','Mai Chau','Huy·ªán Mai Ch√¢u','Mai Chau District','mai_chau','17',7),
            ('157','L·∫°c S∆°n','Lac Son','Huy·ªán L·∫°c S∆°n','Lac Son District','lac_son','17',7),
            ('158','Y√™n Th·ªßy','Yen Thuy','Huy·ªán Y√™n Th·ªßy','Yen Thuy District','yen_thuy','17',7),
            ('159','L·∫°c Th·ªßy','Lac Thuy','Huy·ªán L·∫°c Th·ªßy','Lac Thuy District','lac_thuy','17',7),
            ('164','Th√°i Nguy√™n','Thai Nguyen','Th√†nh ph·ªë Th√°i Nguy√™n','Thai Nguyen City','thai_nguyen','19',4),
            ('165','S√¥ng C√¥ng','Song Cong','Th√†nh ph·ªë S√¥ng C√¥ng','Song Cong City','song_cong','19',4),
            ('167','ƒê·ªãnh H√≥a','Dinh Hoa','Huy·ªán ƒê·ªãnh H√≥a','Dinh Hoa District','dinh_hoa','19',7),
            ('168','Ph√∫ L∆∞∆°ng','Phu Luong','Huy·ªán Ph√∫ L∆∞∆°ng','Phu Luong District','phu_luong','19',7),
            ('169','ƒê·ªìng H·ª∑','Dong Hy','Huy·ªán ƒê·ªìng H·ª∑','Dong Hy District','dong_hy','19',7),
            ('170','V√µ Nhai','Vo Nhai','Huy·ªán V√µ Nhai','Vo Nhai District','vo_nhai','19',7),
            ('171','ƒê·∫°i T·ª´','Dai Tu','Huy·ªán ƒê·∫°i T·ª´','Dai Tu District','dai_tu','19',7),
            ('172','Ph·ªï Y√™n','Pho Yen','Th√†nh ph·ªë Ph·ªï Y√™n','Pho Yen City','pho_yen','19',4),
            ('173','Ph√∫ B√¨nh','Phu Binh','Huy·ªán Ph√∫ B√¨nh','Phu Binh District','phu_binh','19',7),
            ('178','L·∫°ng S∆°n','Lang Son','Th√†nh ph·ªë L·∫°ng S∆°n','Lang Son City','lang_son','20',4),
            ('180','Tr√†ng ƒê·ªãnh','Trang Dinh','Huy·ªán Tr√†ng ƒê·ªãnh','Trang Dinh District','trang_dinh','20',7),
            ('181','B√¨nh Gia','Binh Gia','Huy·ªán B√¨nh Gia','Binh Gia District','binh_gia','20',7),
            ('182','VƒÉn L√£ng','Van Lang','Huy·ªán VƒÉn L√£ng','Van Lang District','van_lang','20',7),
            ('183','Cao L·ªôc','Cao Loc','Huy·ªán Cao L·ªôc','Cao Loc District','cao_loc','20',7),
            ('184','VƒÉn Quan','Van Quan','Huy·ªán VƒÉn Quan','Van Quan District','van_quan','20',7),
            ('185','B·∫Øc S∆°n','Bac Son','Huy·ªán B·∫Øc S∆°n','Bac Son District','bac_son','20',7),
            ('186','H·ªØu L≈©ng','Huu Lung','Huy·ªán H·ªØu L≈©ng','Huu Lung District','huu_lung','20',7),
            ('187','Chi LƒÉng','Chi Lang','Huy·ªán Chi LƒÉng','Chi Lang District','chi_lang','20',7),
            ('188','L·ªôc B√¨nh','Loc Binh','Huy·ªán L·ªôc B√¨nh','Loc Binh District','loc_binh','20',7),
            ('189','ƒê√¨nh L·∫≠p','Dinh Lap','Huy·ªán ƒê√¨nh L·∫≠p','Dinh Lap District','dinh_lap','20',7),
            ('193','H·∫° Long','Ha Long','Th√†nh ph·ªë H·∫° Long','Ha Long City','ha_long','22',4),
            ('194','M√≥ng C√°i','Mong Cai','Th√†nh ph·ªë M√≥ng C√°i','Mong Cai City','mong_cai','22',4),
            ('195','C·∫©m Ph·∫£','Cam Pha','Th√†nh ph·ªë C·∫©m Ph·∫£','Cam Pha City','cam_pha','22',4),
            ('196','U√¥ng B√≠','Uong Bi','Th√†nh ph·ªë U√¥ng B√≠','Uong Bi City','uong_bi','22',4),
            ('198','B√¨nh Li√™u','Binh Lieu','Huy·ªán B√¨nh Li√™u','Binh Lieu District','binh_lieu','22',7),
            ('199','Ti√™n Y√™n','Tien Yen','Huy·ªán Ti√™n Y√™n','Tien Yen District','tien_yen','22',7)
        ON DUPLICATE KEY UPDATE
            Name                 = VALUES(Name),
            NameEn               = VALUES(NameEn),
            FullName             = VALUES(FullName),
            FullNameEn           = VALUES(FullNameEn),
            CodeName             = VALUES(CodeName),
            ProvinceCode         = VALUES(ProvinceCode),
            AdministrativeUnitID = VALUES(AdministrativeUnitID)
    `);

    await pool.execute(`
        INSERT INTO Districts(DistrictCode, Name, NameEn, FullName, FullNameEn, CodeName, ProvinceCode, AdministrativeUnitID) VALUES
            ('200','ƒê·∫ßm H√†','Dam Ha','Huy·ªán ƒê·∫ßm H√†','Dam Ha District','dam_ha','22',7),
            ('201','H·∫£i H√†','Hai Ha','Huy·ªán H·∫£i H√†','Hai Ha District','hai_ha','22',7),
            ('202','Ba Ch·∫Ω','Ba Che','Huy·ªán Ba Ch·∫Ω','Ba Che District','ba_che','22',7),
            ('203','V√¢n ƒê·ªìn','Van Don','Huy·ªán V√¢n ƒê·ªìn','Van Don District','van_don','22',7),
            ('205','ƒê√¥ng Tri·ªÅu','Dong Trieu','Th√†nh ph·ªë ƒê√¥ng Tri·ªÅu','Dong Trieu City','dong_trieu','22',4),
            ('206','Qu·∫£ng Y√™n','Quang Yen','Th·ªã x√£ Qu·∫£ng Y√™n','Quang Yen Town','quang_yen','22',6),
            ('207','C√¥ T√¥','Co To','Huy·ªán C√¥ T√¥','Co To District','co_to','22',7),
            ('213','B·∫Øc Giang','Bac Giang','Th√†nh ph·ªë B·∫Øc Giang','Bac Giang City','bac_giang','24',4),
            ('215','Y√™n Th·∫ø','Yen The','Huy·ªán Y√™n Th·∫ø','Yen The District','yen_the','24',7),
            ('216','T√¢n Y√™n','Tan Yen','Huy·ªán T√¢n Y√™n','Tan Yen District','tan_yen','24',7),
            ('217','L·∫°ng Giang','Lang Giang','Huy·ªán L·∫°ng Giang','Lang Giang District','lang_giang','24',7),
            ('218','L·ª•c Nam','Luc Nam','Huy·ªán L·ª•c Nam','Luc Nam District','luc_nam','24',7),
            ('219','L·ª•c Ng·∫°n','Luc Ngan','Huy·ªán L·ª•c Ng·∫°n','Luc Ngan District','luc_ngan','24',7),
            ('220','S∆°n ƒê·ªông','Son Dong','Huy·ªán S∆°n ƒê·ªông','Son Dong District','son_dong','24',7),
            ('222','Vi·ªát Y√™n','Viet Yen','Th·ªã x√£ Vi·ªát Y√™n','Viet Yen Town','viet_yen','24',6),
            ('223','Hi·ªáp H√≤a','Hiep Hoa','Huy·ªán Hi·ªáp H√≤a','Hiep Hoa District','hiep_hoa','24',7),
            ('224','Ch≈©','Chu','Th·ªã x√£ Ch≈©','Chu Town','chu','24',6),
            ('227','Vi·ªát Tr√¨','Viet Tri','Th√†nh ph·ªë Vi·ªát Tr√¨','Viet Tri City','viet_tri','25',4),
            ('228','Ph√∫ Th·ªç','Phu Tho','Th·ªã x√£ Ph√∫ Th·ªç','Phu Tho Town','phu_tho','25',6),
            ('230','ƒêoan H√πng','Doan Hung','Huy·ªán ƒêoan H√πng','Doan Hung District','doan_hung','25',7),
            ('231','H·∫° H√≤a','Ha Hoa','Huy·ªán H·∫° H√≤a','Ha Hoa District','ha_hoa','25',7),
            ('232','Thanh Ba','Thanh Ba','Huy·ªán Thanh Ba','Thanh Ba District','thanh_ba','25',7),
            ('233','Ph√π Ninh','Phu Ninh','Huy·ªán Ph√π Ninh','Phu Ninh District','phu_ninh','25',7),
            ('234','Y√™n L·∫≠p','Yen Lap','Huy·ªán Y√™n L·∫≠p','Yen Lap District','yen_lap','25',7),
            ('235','C·∫©m Kh√™','Cam Khe','Huy·ªán C·∫©m Kh√™','Cam Khe District','cam_khe','25',7),
            ('236','Tam N√¥ng','Tam Nong','Huy·ªán Tam N√¥ng','Tam Nong District','tam_nong','25',7),
            ('237','L√¢m Thao','Lam Thao','Huy·ªán L√¢m Thao','Lam Thao District','lam_thao','25',7),
            ('238','Thanh S∆°n','Thanh Son','Huy·ªán Thanh S∆°n','Thanh Son District','thanh_son','25',7),
            ('239','Thanh Thu·ª∑','Thanh Thuy','Huy·ªán Thanh Thu·ª∑','Thanh Thuy District','thanh_thuy','25',7),
            ('240','T√¢n S∆°n','Tan Son','Huy·ªán T√¢n S∆°n','Tan Son District','tan_son','25',7),
            ('243','Vƒ©nh Y√™n','Vinh Yen','Th√†nh ph·ªë Vƒ©nh Y√™n','Vinh Yen City','vinh_yen','26',4),
            ('244','Ph√∫c Y√™n','Phuc Yen','Th√†nh ph·ªë Ph√∫c Y√™n','Phuc Yen City','phuc_yen','26',4),
            ('246','L·∫≠p Th·∫°ch','Lap Thach','Huy·ªán L·∫≠p Th·∫°ch','Lap Thach District','lap_thach','26',7),
            ('247','Tam D∆∞∆°ng','Tam Duong','Huy·ªán Tam D∆∞∆°ng','Tam Duong District','tam_duong','26',7),
            ('248','Tam ƒê·∫£o','Tam Dao','Huy·ªán Tam ƒê·∫£o','Tam Dao District','tam_dao','26',7),
            ('249','B√¨nh Xuy√™n','Binh Xuyen','Huy·ªán B√¨nh Xuy√™n','Binh Xuyen District','binh_xuyen','26',7),
            ('251','Y√™n L·∫°c','Yen Lac','Huy·ªán Y√™n L·∫°c','Yen Lac District','yen_lac','26',7),
            ('252','Vƒ©nh T∆∞·ªùng','Vinh Tuong','Huy·ªán Vƒ©nh T∆∞·ªùng','Vinh Tuong District','vinh_tuong','26',7),
            ('253','S√¥ng L√¥','Song Lo','Huy·ªán S√¥ng L√¥','Song Lo District','song_lo','26',7),
            ('256','B·∫Øc Ninh','Bac Ninh','Th√†nh ph·ªë B·∫Øc Ninh','Bac Ninh City','bac_ninh','27',4),
            ('258','Y√™n Phong','Yen Phong','Huy·ªán Y√™n Phong','Yen Phong District','yen_phong','27',7),
            ('259','Qu·∫ø V√µ','Que Vo','Th·ªã x√£ Qu·∫ø V√µ','Que Vo Town','que_vo','27',6),
            ('260','Ti√™n Du','Tien Du','Huy·ªán Ti√™n Du','Tien Du District','tien_du','27',7),
            ('261','T·ª´ S∆°n','Tu Son','Th√†nh ph·ªë T·ª´ S∆°n','Tu Son City','tu_son','27',4),
            ('262','Thu·∫≠n Th√†nh','Thuan Thanh','Th·ªã x√£ Thu·∫≠n Th√†nh','Thuan Thanh Town','thuan_thanh','27',6),
            ('263','Gia B√¨nh','Gia Binh','Huy·ªán Gia B√¨nh','Gia Binh District','gia_binh','27',7),
            ('264','L∆∞∆°ng T√†i','Luong Tai','Huy·ªán L∆∞∆°ng T√†i','Luong Tai District','luong_tai','27',7),
            ('288','H·∫£i D∆∞∆°ng','Hai Duong','Th√†nh ph·ªë H·∫£i D∆∞∆°ng','Hai Duong City','hai_duong','30',4),
            ('290','Ch√≠ Linh','Chi Linh','Th√†nh ph·ªë Ch√≠ Linh','Chi Linh City','chi_linh','30',4),
            ('291','Nam S√°ch','Nam Sach','Huy·ªán Nam S√°ch','Nam Sach District','nam_sach','30',7),
            ('292','Kinh M√¥n','Kinh Mon','Th·ªã x√£ Kinh M√¥n','Kinh Mon Town','kinh_mon','30',6),
            ('293','Kim Th√†nh','Kim Thanh','Huy·ªán Kim Th√†nh','Kim Thanh District','kim_thanh','30',7),
            ('294','Thanh H√†','Thanh Ha','Huy·ªán Thanh H√†','Thanh Ha District','thanh_ha','30',7),
            ('295','C·∫©m Gi√†ng','Cam Giang','Huy·ªán C·∫©m Gi√†ng','Cam Giang District','cam_giang','30',7),
            ('296','B√¨nh Giang','Binh Giang','Huy·ªán B√¨nh Giang','Binh Giang District','binh_giang','30',7),
            ('297','Gia L·ªôc','Gia Loc','Huy·ªán Gia L·ªôc','Gia Loc District','gia_loc','30',7),
            ('298','T·ª© K·ª≥','Tu Ky','Huy·ªán T·ª© K·ª≥','Tu Ky District','tu_ky','30',7),
            ('299','Ninh Giang','Ninh Giang','Huy·ªán Ninh Giang','Ninh Giang District','ninh_giang','30',7),
            ('300','Thanh Mi·ªán','Thanh Mien','Huy·ªán Thanh Mi·ªán','Thanh Mien District','thanh_mien','30',7),
            ('303','H·ªìng B√†ng','Hong Bang','Qu·∫≠n H·ªìng B√†ng','Hong Bang District','hong_bang','31',5),
            ('304','Ng√¥ Quy·ªÅn','Ngo Quyen','Qu·∫≠n Ng√¥ Quy·ªÅn','Ngo Quyen District','ngo_quyen','31',5),
            ('305','L√™ Ch√¢n','Le Chan','Qu·∫≠n L√™ Ch√¢n','Le Chan District','le_chan','31',5),
            ('306','H·∫£i An','Hai An','Qu·∫≠n H·∫£i An','Hai An District','hai_an','31',5),
            ('307','Ki·∫øn An','Kien An','Qu·∫≠n Ki·∫øn An','Kien An District','kien_an','31',5),
            ('308','ƒê·ªì S∆°n','Do Son','Qu·∫≠n ƒê·ªì S∆°n','Do Son District','do_son','31',5),
            ('309','D∆∞∆°ng Kinh','Duong Kinh','Qu·∫≠n D∆∞∆°ng Kinh','Duong Kinh District','duong_kinh','31',5),
            ('311','Thu·ª∑ Nguy√™n','Thuy Nguyen','Th√†nh ph·ªë Thu·ª∑ Nguy√™n','Thuy Nguyen City','thuy_nguyen','31',4),
            ('312','An D∆∞∆°ng','An Duong','Qu·∫≠n An D∆∞∆°ng','An Duong District','an_duong','31',5),
            ('313','An L√£o','An Lao','Huy·ªán An L√£o','An Lao District','an_lao','31',7),
            ('314','Ki·∫øn Thu·ªµ','Kien Thuy','Huy·ªán Ki·∫øn Thu·ªµ','Kien Thuy District','kien_thuy','31',7),
            ('315','Ti√™n L√£ng','Tien Lang','Huy·ªán Ti√™n L√£ng','Tien Lang District','tien_lang','31',7),
            ('316','Vƒ©nh B·∫£o','Vinh Bao','Huy·ªán Vƒ©nh B·∫£o','Vinh Bao District','vinh_bao','31',7),
            ('317','C√°t H·∫£i','Cat Hai','Huy·ªán C√°t H·∫£i','Cat Hai District','cat_hai','31',7),
            ('318','B·∫°ch Long Vƒ©','Bach Long Vi','Huy·ªán B·∫°ch Long Vƒ©','Bach Long Vi District','bach_long_vi','31',7),
            ('323','H∆∞ng Y√™n','Hung Yen','Th√†nh ph·ªë H∆∞ng Y√™n','Hung Yen City','hung_yen','33',4),
            ('325','VƒÉn L√¢m','Van Lam','Huy·ªán VƒÉn L√¢m','Van Lam District','van_lam','33',7),
            ('326','VƒÉn Giang','Van Giang','Huy·ªán VƒÉn Giang','Van Giang District','van_giang','33',7),
            ('327','Y√™n M·ªπ','Yen My','Huy·ªán Y√™n M·ªπ','Yen My District','yen_my','33',7),
            ('328','M·ªπ H√†o','My Hao','Th·ªã x√£ M·ªπ H√†o','My Hao Town','my_hao','33',6),
            ('329','√Çn Thi','An Thi','Huy·ªán √Çn Thi','An Thi District','an_thi','33',7),
            ('330','Kho√°i Ch√¢u','Khoai Chau','Huy·ªán Kho√°i Ch√¢u','Khoai Chau District','khoai_chau','33',7),
            ('331','Kim ƒê·ªông','Kim Dong','Huy·ªán Kim ƒê·ªông','Kim Dong District','kim_dong','33',7),
            ('332','Ti√™n L·ªØ','Tien Lu','Huy·ªán Ti√™n L·ªØ','Tien Lu District','tien_lu','33',7),
            ('333','Ph√π C·ª´','Phu Cu','Huy·ªán Ph√π C·ª´','Phu Cu District','phu_cu','33',7),
            ('336','Th√°i B√¨nh','Thai Binh','Th√†nh ph·ªë Th√°i B√¨nh','Thai Binh City','thai_binh','34',4),
            ('338','Qu·ª≥nh Ph·ª•','Quynh Phu','Huy·ªán Qu·ª≥nh Ph·ª•','Quynh Phu District','quynh_phu','34',7),
            ('339','H∆∞ng H√†','Hung Ha','Huy·ªán H∆∞ng H√†','Hung Ha District','hung_ha','34',7),
            ('340','ƒê√¥ng H∆∞ng','Dong Hung','Huy·ªán ƒê√¥ng H∆∞ng','Dong Hung District','dong_hung','34',7),
            ('341','Th√°i Th·ª•y','Thai Thuy','Huy·ªán Th√°i Th·ª•y','Thai Thuy District','thai_thuy','34',7),
            ('342','Ti·ªÅn H·∫£i','Tien Hai','Huy·ªán Ti·ªÅn H·∫£i','Tien Hai District','tien_hai','34',7),
            ('343','Ki·∫øn X∆∞∆°ng','Kien Xuong','Huy·ªán Ki·∫øn X∆∞∆°ng','Kien Xuong District','kien_xuong','34',7),
            ('344','V≈© Th∆∞','Vu Thu','Huy·ªán V≈© Th∆∞','Vu Thu District','vu_thu','34',7),
            ('347','Ph·ªß L√Ω','Phu Ly','Th√†nh ph·ªë Ph·ªß L√Ω','Phu Ly City','phu_ly','35',4),
            ('349','Duy Ti√™n','Duy Tien','Th·ªã x√£ Duy Ti√™n','Duy Tien Town','duy_tien','35',6),
            ('350','Kim B·∫£ng','Kim Bang','Th·ªã x√£ Kim B·∫£ng','Kim Bang Town','kim_bang','35',6),
            ('351','Thanh Li√™m','Thanh Liem','Huy·ªán Thanh Li√™m','Thanh Liem District','thanh_liem','35',7),
            ('352','B√¨nh L·ª•c','Binh Luc','Huy·ªán B√¨nh L·ª•c','Binh Luc District','binh_luc','35',7),
            ('353','L√Ω Nh√¢n','Ly Nhan','Huy·ªán L√Ω Nh√¢n','Ly Nhan District','ly_nhan','35',7),
            ('356','Nam ƒê·ªãnh','Nam Dinh','Th√†nh ph·ªë Nam ƒê·ªãnh','Nam Dinh City','nam_dinh','36',4),
            ('359','V·ª• B·∫£n','Vu Ban','Huy·ªán V·ª• B·∫£n','Vu Ban District','vu_ban','36',7),
            ('360','√ù Y√™n','Y Yen','Huy·ªán √ù Y√™n','Y Yen District','y_yen','36',7),
            ('361','Nghƒ©a H∆∞ng','Nghia Hung','Huy·ªán Nghƒ©a H∆∞ng','Nghia Hung District','nghia_hung','36',7),
            ('362','Nam Tr·ª±c','Nam Truc','Huy·ªán Nam Tr·ª±c','Nam Truc District','nam_truc','36',7),
            ('363','Tr·ª±c Ninh','Truc Ninh','Huy·ªán Tr·ª±c Ninh','Truc Ninh District','truc_ninh','36',7),
            ('364','Xu√¢n Tr∆∞·ªùng','Xuan Truong','Huy·ªán Xu√¢n Tr∆∞·ªùng','Xuan Truong District','xuan_truong','36',7),
            ('365','Giao Th·ªßy','Giao Thuy','Huy·ªán Giao Th·ªßy','Giao Thuy District','giao_thuy','36',7),
            ('366','H·∫£i H·∫≠u','Hai Hau','Huy·ªán H·∫£i H·∫≠u','Hai Hau District','hai_hau','36',7),
            ('370','Tam ƒêi·ªáp','Tam Diep','Th√†nh ph·ªë Tam ƒêi·ªáp','Tam Diep City','tam_diep','37',4),
            ('372','Nho Quan','Nho Quan','Huy·ªán Nho Quan','Nho Quan District','nho_quan','37',7),
            ('373','Gia Vi·ªÖn','Gia Vien','Huy·ªán Gia Vi·ªÖn','Gia Vien District','gia_vien','37',7),
            ('374','Hoa L∆∞','Hoa Lu','Th√†nh ph·ªë Hoa L∆∞','Hoa Lu City','hoa_lu','37',4),
            ('375','Y√™n Kh√°nh','Yen Khanh','Huy·ªán Y√™n Kh√°nh','Yen Khanh District','yen_khanh','37',7),
            ('376','Kim S∆°n','Kim Son','Huy·ªán Kim S∆°n','Kim Son District','kim_son','37',7),
            ('377','Y√™n M√¥','Yen Mo','Huy·ªán Y√™n M√¥','Yen Mo District','yen_mo','37',7),
            ('380','Thanh H√≥a','Thanh Hoa','Th√†nh ph·ªë Thanh H√≥a','Thanh Hoa City','thanh_hoa','38',4),
            ('381','B·ªâm S∆°n','Bim Son','Th·ªã x√£ B·ªâm S∆°n','Bim Son Town','bim_son','38',6),
            ('382','S·∫ßm S∆°n','Sam Son','Th√†nh ph·ªë S·∫ßm S∆°n','Sam Son City','sam_son','38',4),
            ('384','M∆∞·ªùng L√°t','Muong Lat','Huy·ªán M∆∞·ªùng L√°t','Muong Lat District','muong_lat','38',7),
            ('385','Quan H√≥a','Quan Hoa','Huy·ªán Quan H√≥a','Quan Hoa District','quan_hoa','38',7),
            ('386','B√° Th∆∞·ªõc','Ba Thuoc','Huy·ªán B√° Th∆∞·ªõc','Ba Thuoc District','ba_thuoc','38',7),
            ('387','Quan S∆°n','Quan Son','Huy·ªán Quan S∆°n','Quan Son District','quan_son','38',7),
            ('388','Lang Ch√°nh','Lang Chanh','Huy·ªán Lang Ch√°nh','Lang Chanh District','lang_chanh','38',7),
            ('389','Ng·ªçc L·∫∑c','Ngoc Lac','Huy·ªán Ng·ªçc L·∫∑c','Ngoc Lac District','ngoc_lac','38',7),
            ('390','C·∫©m Th·ªßy','Cam Thuy','Huy·ªán C·∫©m Th·ªßy','Cam Thuy District','cam_thuy','38',7),
            ('391','Th·∫°ch Th√†nh','Thach Thanh','Huy·ªán Th·∫°ch Th√†nh','Thach Thanh District','thach_thanh','38',7),
            ('392','H√† Trung','Ha Trung','Huy·ªán H√† Trung','Ha Trung District','ha_trung','38',7),
            ('393','Vƒ©nh L·ªôc','Vinh Loc','Huy·ªán Vƒ©nh L·ªôc','Vinh Loc District','vinh_loc','38',7),
            ('394','Y√™n ƒê·ªãnh','Yen Dinh','Huy·ªán Y√™n ƒê·ªãnh','Yen Dinh District','yen_dinh','38',7),
            ('395','Th·ªç Xu√¢n','Tho Xuan','Huy·ªán Th·ªç Xu√¢n','Tho Xuan District','tho_xuan','38',7),
            ('396','Th∆∞·ªùng Xu√¢n','Thuong Xuan','Huy·ªán Th∆∞·ªùng Xu√¢n','Thuong Xuan District','thuong_xuan','38',7),
            ('397','Tri·ªáu S∆°n','Trieu Son','Huy·ªán Tri·ªáu S∆°n','Trieu Son District','trieu_son','38',7),
            ('398','Thi·ªáu H√≥a','Thieu Hoa','Huy·ªán Thi·ªáu H√≥a','Thieu Hoa District','thieu_hoa','38',7),
            ('399','Ho·∫±ng H√≥a','Hoang Hoa','Huy·ªán Ho·∫±ng H√≥a','Hoang Hoa District','hoang_hoa','38',7),
            ('400','H·∫≠u L·ªôc','Hau Loc','Huy·ªán H·∫≠u L·ªôc','Hau Loc District','hau_loc','38',7),
            ('401','Nga S∆°n','Nga Son','Huy·ªán Nga S∆°n','Nga Son District','nga_son','38',7),
            ('402','Nh∆∞ Xu√¢n','Nhu Xuan','Huy·ªán Nh∆∞ Xu√¢n','Nhu Xuan District','nhu_xuan','38',7),
            ('403','Nh∆∞ Thanh','Nhu Thanh','Huy·ªán Nh∆∞ Thanh','Nhu Thanh District','nhu_thanh','38',7),
            ('404','N√¥ng C·ªëng','Nong Cong','Huy·ªán N√¥ng C·ªëng','Nong Cong District','nong_cong','38',7),
            ('406','Qu·∫£ng X∆∞∆°ng','Quang Xuong','Huy·ªán Qu·∫£ng X∆∞∆°ng','Quang Xuong District','quang_xuong','38',7),
            ('407','Nghi S∆°n','Nghi Son','Th·ªã x√£ Nghi S∆°n','Nghi Son Town','nghi_son','38',6),
            ('412','Vinh','Vinh','Th√†nh ph·ªë Vinh','Vinh City','vinh','40',4),
            ('414','Th√°i H√≤a','Thai Hoa','Th·ªã x√£ Th√°i H√≤a','Thai Hoa Town','thai_hoa','40',6),
            ('415','Qu·∫ø Phong','Que Phong','Huy·ªán Qu·∫ø Phong','Que Phong District','que_phong','40',7),
            ('416','Qu·ª≥ Ch√¢u','Quy Chau','Huy·ªán Qu·ª≥ Ch√¢u','Quy Chau District','quy_chau','40',7),
            ('417','K·ª≥ S∆°n','Ky Son','Huy·ªán K·ª≥ S∆°n','Ky Son District','ky_son','40',7),
            ('418','T∆∞∆°ng D∆∞∆°ng','Tuong Duong','Huy·ªán T∆∞∆°ng D∆∞∆°ng','Tuong Duong District','tuong_duong','40',7),
            ('419','Nghƒ©a ƒê√†n','Nghia Dan','Huy·ªán Nghƒ©a ƒê√†n','Nghia Dan District','nghia_dan','40',7),
            ('420','Qu·ª≥ H·ª£p','Quy Hop','Huy·ªán Qu·ª≥ H·ª£p','Quy Hop District','quy_hop','40',7),
            ('421','Qu·ª≥nh L∆∞u','Quynh Luu','Huy·ªán Qu·ª≥nh L∆∞u','Quynh Luu District','quynh_luu','40',7),
            ('422','Con Cu√¥ng','Con Cuong','Huy·ªán Con Cu√¥ng','Con Cuong District','con_cuong','40',7)
        ON DUPLICATE KEY UPDATE
            Name                 = VALUES(Name),
            NameEn               = VALUES(NameEn),
            FullName             = VALUES(FullName),
            FullNameEn           = VALUES(FullNameEn),
            CodeName             = VALUES(CodeName),
            ProvinceCode         = VALUES(ProvinceCode),
            AdministrativeUnitID = VALUES(AdministrativeUnitID)
    `);

    await pool.execute(`
        INSERT INTO Districts(DistrictCode, Name, NameEn, FullName, FullNameEn, CodeName, ProvinceCode, AdministrativeUnitID) VALUES
            ('423','T√¢n K·ª≥','Tan Ky','Huy·ªán T√¢n K·ª≥','Tan Ky District','tan_ky','40',7),
            ('424','Anh S∆°n','Anh Son','Huy·ªán Anh S∆°n','Anh Son District','anh_son','40',7),
            ('425','Di·ªÖn Ch√¢u','Dien Chau','Huy·ªán Di·ªÖn Ch√¢u','Dien Chau District','dien_chau','40',7),
            ('426','Y√™n Th√†nh','Yen Thanh','Huy·ªán Y√™n Th√†nh','Yen Thanh District','yen_thanh','40',7),
            ('427','ƒê√¥ L∆∞∆°ng','Do Luong','Huy·ªán ƒê√¥ L∆∞∆°ng','Do Luong District','do_luong','40',7),
            ('428','Thanh Ch∆∞∆°ng','Thanh Chuong','Huy·ªán Thanh Ch∆∞∆°ng','Thanh Chuong District','thanh_chuong','40',7),
            ('429','Nghi L·ªôc','Nghi Loc','Huy·ªán Nghi L·ªôc','Nghi Loc District','nghi_loc','40',7),
            ('430','Nam ƒê√†n','Nam Dan','Huy·ªán Nam ƒê√†n','Nam Dan District','nam_dan','40',7),
            ('431','H∆∞ng Nguy√™n','Hung Nguyen','Huy·ªán H∆∞ng Nguy√™n','Hung Nguyen District','hung_nguyen','40',7),
            ('432','Ho√†ng Mai','Hoang Mai','Th·ªã x√£ Ho√†ng Mai','Hoang Mai Town','hoang_mai','40',6),
            ('436','H√† Tƒ©nh','Ha Tinh','Th√†nh ph·ªë H√† Tƒ©nh','Ha Tinh City','ha_tinh','42',4),
            ('437','H·ªìng Lƒ©nh','Hong Linh','Th·ªã x√£ H·ªìng Lƒ©nh','Hong Linh Town','hong_linh','42',6),
            ('439','H∆∞∆°ng S∆°n','Huong Son','Huy·ªán H∆∞∆°ng S∆°n','Huong Son District','huong_son','42',7),
            ('440','ƒê·ª©c Th·ªç','Duc Tho','Huy·ªán ƒê·ª©c Th·ªç','Duc Tho District','duc_tho','42',7),
            ('441','V≈© Quang','Vu Quang','Huy·ªán V≈© Quang','Vu Quang District','vu_quang','42',7),
            ('442','Nghi Xu√¢n','Nghi Xuan','Huy·ªán Nghi Xu√¢n','Nghi Xuan District','nghi_xuan','42',7),
            ('443','Can L·ªôc','Can Loc','Huy·ªán Can L·ªôc','Can Loc District','can_loc','42',7),
            ('444','H∆∞∆°ng Kh√™','Huong Khe','Huy·ªán H∆∞∆°ng Kh√™','Huong Khe District','huong_khe','42',7),
            ('445','Th·∫°ch H√†','Thach Ha','Huy·ªán Th·∫°ch H√†','Thach Ha District','thach_ha','42',7),
            ('446','C·∫©m Xuy√™n','Cam Xuyen','Huy·ªán C·∫©m Xuy√™n','Cam Xuyen District','cam_xuyen','42',7),
            ('447','K·ª≥ Anh','Ky Anh','Huy·ªán K·ª≥ Anh','Ky Anh District','ky_anh','42',7),
            ('449','K·ª≥ Anh','Ky Anh','Th·ªã x√£ K·ª≥ Anh','Ky Anh Town','ky_anh','42',6),
            ('450','ƒê·ªìng H·ªõi','Dong Hoi','Th√†nh ph·ªë ƒê·ªìng H·ªõi','Dong Hoi City','dong_hoi','44',4),
            ('452','Minh H√≥a','Minh Hoa','Huy·ªán Minh H√≥a','Minh Hoa District','minh_hoa','44',7),
            ('453','Tuy√™n H√≥a','Tuyen Hoa','Huy·ªán Tuy√™n H√≥a','Tuyen Hoa District','tuyen_hoa','44',7),
            ('454','Qu·∫£ng Tr·∫°ch','Quang Trach','Huy·ªán Qu·∫£ng Tr·∫°ch','Quang Trach District','quang_trach','44',7),
            ('455','B·ªë Tr·∫°ch','Bo Trach','Huy·ªán B·ªë Tr·∫°ch','Bo Trach District','bo_trach','44',7),
            ('456','Qu·∫£ng Ninh','Quang Ninh','Huy·ªán Qu·∫£ng Ninh','Quang Ninh District','quang_ninh','44',7),
            ('457','L·ªá Th·ªßy','Le Thuy','Huy·ªán L·ªá Th·ªßy','Le Thuy District','le_thuy','44',7),
            ('458','Ba ƒê·ªìn','Ba Don','Th·ªã x√£ Ba ƒê·ªìn','Ba Don Town','ba_don','44',6),
            ('461','ƒê√¥ng H√†','Dong Ha','Th√†nh ph·ªë ƒê√¥ng H√†','Dong Ha City','dong_ha','45',4),
            ('462','Qu·∫£ng Tr·ªã','Quang Tri','Th·ªã x√£ Qu·∫£ng Tr·ªã','Quang Tri Town','quang_tri','45',6),
            ('464','Vƒ©nh Linh','Vinh Linh','Huy·ªán Vƒ©nh Linh','Vinh Linh District','vinh_linh','45',7),
            ('465','H∆∞·ªõng H√≥a','Huong Hoa','Huy·ªán H∆∞·ªõng H√≥a','Huong Hoa District','huong_hoa','45',7),
            ('466','Gio Linh','Gio Linh','Huy·ªán Gio Linh','Gio Linh District','gio_linh','45',7),
            ('467','ƒêa Kr√¥ng','Da Krong','Huy·ªán ƒêa Kr√¥ng','Da Krong District','da_krong','45',7),
            ('468','Cam L·ªô','Cam Lo','Huy·ªán Cam L·ªô','Cam Lo District','cam_lo','45',7),
            ('469','Tri·ªáu Phong','Trieu Phong','Huy·ªán Tri·ªáu Phong','Trieu Phong District','trieu_phong','45',7),
            ('470','H·∫£i LƒÉng','Hai Lang','Huy·ªán H·∫£i LƒÉng','Hai Lang District','hai_lang','45',7),
            ('471','C·ªìn C·ªè','Con Co','Huy·ªán C·ªìn C·ªè','Con Co District','con_co','45',7),
            ('474','Thu·∫≠n H√≥a','Thuan Hoa','Qu·∫≠n Thu·∫≠n H√≥a','Thuan Hoa District','thuan_hoa','46',5),
            ('475','Ph√∫ Xu√¢n','Phu Xuan','Qu·∫≠n Ph√∫ Xu√¢n','Phu Xuan District','phu_xuan','46',5),
            ('476','Phong ƒêi·ªÅn','Phong Dien','Th·ªã x√£ Phong ƒêi·ªÅn','Phong Dien Town','phong_dien','46',6),
            ('477','Qu·∫£ng ƒêi·ªÅn','Quang Dien','Huy·ªán Qu·∫£ng ƒêi·ªÅn','Quang Dien District','quang_dien','46',7),
            ('478','Ph√∫ Vang','Phu Vang','Huy·ªán Ph√∫ Vang','Phu Vang District','phu_vang','46',7),
            ('479','H∆∞∆°ng Th·ªßy','Huong Thuy','Th·ªã x√£ H∆∞∆°ng Th·ªßy','Huong Thuy Town','huong_thuy','46',6),
            ('480','H∆∞∆°ng Tr√†','Huong Tra','Th·ªã x√£ H∆∞∆°ng Tr√†','Huong Tra Town','huong_tra','46',6),
            ('481','A L∆∞·ªõi','A Luoi','Huy·ªán A L∆∞·ªõi','A Luoi District','a_luoi','46',7),
            ('482','Ph√∫ L·ªôc','Phu Loc','Huy·ªán Ph√∫ L·ªôc','Phu Loc District','phu_loc','46',7),
            ('490','Li√™n Chi·ªÉu','Lien Chieu','Qu·∫≠n Li√™n Chi·ªÉu','Lien Chieu District','lien_chieu','48',5)
        ON DUPLICATE KEY UPDATE
            Name                 = VALUES(Name),
            NameEn               = VALUES(NameEn),
            FullName             = VALUES(FullName),
            FullNameEn           = VALUES(FullNameEn),
            CodeName             = VALUES(CodeName),
            ProvinceCode         = VALUES(ProvinceCode),
            AdministrativeUnitID = VALUES(AdministrativeUnitID)
    `);

    await pool.execute(`
        INSERT INTO Districts(DistrictCode, Name, NameEn, FullName, FullNameEn, CodeName, ProvinceCode, AdministrativeUnitID) VALUES
            ('491','Thanh Kh√™','Thanh Khe','Qu·∫≠n Thanh Kh√™','Thanh Khe District','thanh_khe','48',5),
            ('492','H·∫£i Ch√¢u','Hai Chau','Qu·∫≠n H·∫£i Ch√¢u','Hai Chau District','hai_chau','48',5),
            ('493','S∆°n Tr√†','Son Tra','Qu·∫≠n S∆°n Tr√†','Son Tra District','son_tra','48',5),
            ('494','Ng≈© H√†nh S∆°n','Ngu Hanh Son','Qu·∫≠n Ng≈© H√†nh S∆°n','Ngu Hanh Son District','ngu_hanh_son','48',5),
            ('495','C·∫©m L·ªá','Cam Le','Qu·∫≠n C·∫©m L·ªá','Cam Le District','cam_le','48',5),
            ('497','H√≤a Vang','Hoa Vang','Huy·ªán H√≤a Vang','Hoa Vang District','hoa_vang','48',7),
            ('498','Ho√†ng Sa','Hoang Sa','Huy·ªán Ho√†ng Sa','Hoang Sa District','hoang_sa','48',7),
            ('502','Tam K·ª≥','Tam Ky','Th√†nh ph·ªë Tam K·ª≥','Tam Ky City','tam_ky','49',4),
            ('503','H·ªôi An','Hoi An','Th√†nh ph·ªë H·ªôi An','Hoi An City','hoi_an','49',4),
            ('504','T√¢y Giang','Tay Giang','Huy·ªán T√¢y Giang','Tay Giang District','tay_giang','49',7),
            ('505','ƒê√¥ng Giang','Dong Giang','Huy·ªán ƒê√¥ng Giang','Dong Giang District','dong_giang','49',7),
            ('506','ƒê·∫°i L·ªôc','Dai Loc','Huy·ªán ƒê·∫°i L·ªôc','Dai Loc District','dai_loc','49',7),
            ('507','ƒêi·ªán B√†n','Dien Ban','Th·ªã x√£ ƒêi·ªán B√†n','Dien Ban Town','dien_ban','49',6),
            ('508','Duy Xuy√™n','Duy Xuyen','Huy·ªán Duy Xuy√™n','Duy Xuyen District','duy_xuyen','49',7),
            ('509','Qu·∫ø S∆°n','Que Son','Huy·ªán Qu·∫ø S∆°n','Que Son District','que_son','49',7),
            ('510','Nam Giang','Nam Giang','Huy·ªán Nam Giang','Nam Giang District','nam_giang','49',7),
            ('511','Ph∆∞·ªõc S∆°n','Phuoc Son','Huy·ªán Ph∆∞·ªõc S∆°n','Phuoc Son District','phuoc_son','49',7),
            ('512','Hi·ªáp ƒê·ª©c','Hiep Duc','Huy·ªán Hi·ªáp ƒê·ª©c','Hiep Duc District','hiep_duc','49',7),
            ('513','ThƒÉng B√¨nh','Thang Binh','Huy·ªán ThƒÉng B√¨nh','Thang Binh District','thang_binh','49',7),
            ('514','Ti√™n Ph∆∞·ªõc','Tien Phuoc','Huy·ªán Ti√™n Ph∆∞·ªõc','Tien Phuoc District','tien_phuoc','49',7),
            ('515','B·∫Øc Tr√† My','Bac Tra My','Huy·ªán B·∫Øc Tr√† My','Bac Tra My District','bac_tra_my','49',7),
            ('516','Nam Tr√† My','Nam Tra My','Huy·ªán Nam Tr√† My','Nam Tra My District','nam_tra_my','49',7),
            ('517','N√∫i Th√†nh','Nui Thanh','Huy·ªán N√∫i Th√†nh','Nui Thanh District','nui_thanh','49',7),
            ('518','Ph√∫ Ninh','Phu Ninh','Huy·ªán Ph√∫ Ninh','Phu Ninh District','phu_ninh','49',7),
            ('522','Qu·∫£ng Ng√£i','Quang Ngai','Th√†nh ph·ªë Qu·∫£ng Ng√£i','Quang Ngai City','quang_ngai','51',4),
            ('524','B√¨nh S∆°n','Binh Son','Huy·ªán B√¨nh S∆°n','Binh Son District','binh_son','51',7),
            ('525','Tr√† B·ªìng','Tra Bong','Huy·ªán Tr√† B·ªìng','Tra Bong District','tra_bong','51',7),
            ('527','S∆°n T·ªãnh','Son Tinh','Huy·ªán S∆°n T·ªãnh','Son Tinh District','son_tinh','51',7),
            ('528','T∆∞ Nghƒ©a','Tu Nghia','Huy·ªán T∆∞ Nghƒ©a','Tu Nghia District','tu_nghia','51',7),
            ('529','S∆°n H√†','Son Ha','Huy·ªán S∆°n H√†','Son Ha District','son_ha','51',7),
            ('530','S∆°n T√¢y','Son Tay','Huy·ªán S∆°n T√¢y','Son Tay District','son_tay','51',7),
            ('531','Minh Long','Minh Long','Huy·ªán Minh Long','Minh Long District','minh_long','51',7),
            ('532','Nghƒ©a H√†nh','Nghia Hanh','Huy·ªán Nghƒ©a H√†nh','Nghia Hanh District','nghia_hanh','51',7),
            ('533','M·ªô ƒê·ª©c','Mo Duc','Huy·ªán M·ªô ƒê·ª©c','Mo Duc District','mo_duc','51',7),
            ('534','ƒê·ª©c Ph·ªï','Duc Pho','Th·ªã x√£ ƒê·ª©c Ph·ªï','Duc Pho Town','duc_pho','51',6),
            ('535','Ba T∆°','Ba To','Huy·ªán Ba T∆°','Ba To District','ba_to','51',7),
            ('536','L√Ω S∆°n','Ly Son','Huy·ªán L√Ω S∆°n','Ly Son District','ly_son','51',7),
            ('540','Quy Nh∆°n','Quy Nhon','Th√†nh ph·ªë Quy Nh∆°n','Quy Nhon City','quy_nhon','52',4),
            ('542','An L√£o','An Lao','Huy·ªán An L√£o','An Lao District','an_lao','52',7),
            ('543','Ho√†i Nh∆°n','Hoai Nhon','Th·ªã x√£ Ho√†i Nh∆°n','Hoai Nhon Town','hoai_nhon','52',6),
            ('544','Ho√†i √Çn','Hoai An','Huy·ªán Ho√†i √Çn','Hoai An District','hoai_an','52',7),
            ('545','Ph√π M·ªπ','Phu My','Huy·ªán Ph√π M·ªπ','Phu My District','phu_my','52',7),
            ('546','Vƒ©nh Th·∫°nh','Vinh Thanh','Huy·ªán Vƒ©nh Th·∫°nh','Vinh Thanh District','vinh_thanh','52',7),
            ('547','T√¢y S∆°n','Tay Son','Huy·ªán T√¢y S∆°n','Tay Son District','tay_son','52',7),
            ('548','Ph√π C√°t','Phu Cat','Huy·ªán Ph√π C√°t','Phu Cat District','phu_cat','52',7),
            ('549','An Nh∆°n','An Nhon','Th·ªã x√£ An Nh∆°n','An Nhon Town','an_nhon','52',6),
            ('550','Tuy Ph∆∞·ªõc','Tuy Phuoc','Huy·ªán Tuy Ph∆∞·ªõc','Tuy Phuoc District','tuy_phuoc','52',7),
            ('551','V√¢n Canh','Van Canh','Huy·ªán V√¢n Canh','Van Canh District','van_canh','52',7),
            ('555','Tuy H√≤a','Tuy Hoa','Th√†nh ph·ªë Tuy H√≤a','Tuy Hoa City','tuy_hoa','54',4),
            ('557','S√¥ng C·∫ßu','Song Cau','Th·ªã x√£ S√¥ng C·∫ßu','Song Cau Town','song_cau','54',6),
            ('558','ƒê·ªìng Xu√¢n','Dong Xuan','Huy·ªán ƒê·ªìng Xu√¢n','Dong Xuan District','dong_xuan','54',7),
            ('559','Tuy An','Tuy An','Huy·ªán Tuy An','Tuy An District','tuy_an','54',7),
            ('560','S∆°n H√≤a','Son Hoa','Huy·ªán S∆°n H√≤a','Son Hoa District','son_hoa','54',7),
            ('561','S√¥ng Hinh','Song Hinh','Huy·ªán S√¥ng Hinh','Song Hinh District','song_hinh','54',7),
            ('562','T√¢y H√≤a','Tay Hoa','Huy·ªán T√¢y H√≤a','Tay Hoa District','tay_hoa','54',7),
            ('563','Ph√∫ H√≤a','Phu Hoa','Huy·ªán Ph√∫ H√≤a','Phu Hoa District','phu_hoa','54',7),
            ('564','ƒê√¥ng H√≤a','Dong Hoa','Th·ªã x√£ ƒê√¥ng H√≤a','Dong Hoa Town','dong_hoa','54',6),
            ('568','Nha Trang','Nha Trang','Th√†nh ph·ªë Nha Trang','Nha Trang City','nha_trang','56',4),
            ('569','Cam Ranh','Cam Ranh','Th√†nh ph·ªë Cam Ranh','Cam Ranh City','cam_ranh','56',4),
            ('570','Cam L√¢m','Cam Lam','Huy·ªán Cam L√¢m','Cam Lam District','cam_lam','56',7),
            ('571','V·∫°n Ninh','Van Ninh','Huy·ªán V·∫°n Ninh','Van Ninh District','van_ninh','56',7),
            ('572','Ninh H√≤a','Ninh Hoa','Th·ªã x√£ Ninh H√≤a','Ninh Hoa Town','ninh_hoa','56',6),
            ('573','Kh√°nh Vƒ©nh','Khanh Vinh','Huy·ªán Kh√°nh Vƒ©nh','Khanh Vinh District','khanh_vinh','56',7),
            ('574','Di√™n Kh√°nh','Dien Khanh','Huy·ªán Di√™n Kh√°nh','Dien Khanh District','dien_khanh','56',7),
            ('575','Kh√°nh S∆°n','Khanh Son','Huy·ªán Kh√°nh S∆°n','Khanh Son District','khanh_son','56',7),
            ('576','Tr∆∞·ªùng Sa','Truong Sa','Huy·ªán Tr∆∞·ªùng Sa','Truong Sa District','truong_sa','56',7),
            ('582','Phan Rang-Th√°p Ch√†m','Phan Rang-Thap Cham','Th√†nh ph·ªë Phan Rang-Th√°p Ch√†m','Phan Rang-Thap Cham City','phan_rang-thap_cham','58',4),
            ('584','B√°c √Åi','Bac Ai','Huy·ªán B√°c √Åi','Bac Ai District','bac_ai','58',7),
            ('585','Ninh S∆°n','Ninh Son','Huy·ªán Ninh S∆°n','Ninh Son District','ninh_son','58',7),
            ('586','Ninh H·∫£i','Ninh Hai','Huy·ªán Ninh H·∫£i','Ninh Hai District','ninh_hai','58',7),
            ('587','Ninh Ph∆∞·ªõc','Ninh Phuoc','Huy·ªán Ninh Ph∆∞·ªõc','Ninh Phuoc District','ninh_phuoc','58',7),
            ('588','Thu·∫≠n B·∫Øc','Thuan Bac','Huy·ªán Thu·∫≠n B·∫Øc','Thuan Bac District','thuan_bac','58',7),
            ('589','Thu·∫≠n Nam','Thuan Nam','Huy·ªán Thu·∫≠n Nam','Thuan Nam District','thuan_nam','58',7),
            ('593','Phan Thi·∫øt','Phan Thiet','Th√†nh ph·ªë Phan Thi·∫øt','Phan Thiet City','phan_thiet','60',4),
            ('594','La Gi','La Gi','Th·ªã x√£ La Gi','La Gi Town','la_gi','60',6),
            ('595','Tuy Phong','Tuy Phong','Huy·ªán Tuy Phong','Tuy Phong District','tuy_phong','60',7),
            ('596','B·∫Øc B√¨nh','Bac Binh','Huy·ªán B·∫Øc B√¨nh','Bac Binh District','bac_binh','60',7),
            ('597','H√†m Thu·∫≠n B·∫Øc','Ham Thuan Bac','Huy·ªán H√†m Thu·∫≠n B·∫Øc','Ham Thuan Bac District','ham_thuan_bac','60',7),
            ('598','H√†m Thu·∫≠n Nam','Ham Thuan Nam','Huy·ªán H√†m Thu·∫≠n Nam','Ham Thuan Nam District','ham_thuan_nam','60',7),
            ('599','T√°nh Linh','Tanh Linh','Huy·ªán T√°nh Linh','Tanh Linh District','tanh_linh','60',7),
            ('600','ƒê·ª©c Linh','Duc Linh','Huy·ªán ƒê·ª©c Linh','Duc Linh District','duc_linh','60',7),
            ('601','H√†m T√¢n','Ham Tan','Huy·ªán H√†m T√¢n','Ham Tan District','ham_tan','60',7),
            ('602','Ph√∫ Qu√≠','Phu Qui','Huy·ªán Ph√∫ Qu√≠','Phu Qui District','phu_qui','60',7),
            ('608','Kon Tum','Kon Tum','Th√†nh ph·ªë Kon Tum','Kon Tum City','kon_tum','62',4),
            ('610','ƒê·∫Øk Glei','Dak Glei','Huy·ªán ƒê·∫Øk Glei','Dak Glei District','dak_glei','62',7),
            ('611','Ng·ªçc H·ªìi','Ngoc Hoi','Huy·ªán Ng·ªçc H·ªìi','Ngoc Hoi District','ngoc_hoi','62',7),
            ('612','ƒê·∫Øk T√¥','Dak To','Huy·ªán ƒê·∫Øk T√¥','Dak To District','dak_to','62',7),
            ('613','Kon Pl√¥ng','Kon Plong','Huy·ªán Kon Pl√¥ng','Kon Plong District','kon_plong','62',7),
            ('614','Kon R·∫´y','Kon Ray','Huy·ªán Kon R·∫´y','Kon Ray District','kon_ray','62',7),
            ('615','ƒê·∫Øk H√†','Dak Ha','Huy·ªán ƒê·∫Øk H√†','Dak Ha District','dak_ha','62',7),
            ('616','Sa Th·∫ßy','Sa Thay','Huy·ªán Sa Th·∫ßy','Sa Thay District','sa_thay','62',7),
            ('617','Tu M∆° R√¥ng','Tu Mo Rong','Huy·ªán Tu M∆° R√¥ng','Tu Mo Rong District','tu_mo_rong','62',7),
            ('618','Ia H'' Drai','Ia H'' Drai','Huy·ªán Ia H'' Drai','Ia H'' Drai District','ia_h_drai','62',7),
            ('622','Pleiku','Pleiku','Th√†nh ph·ªë Pleiku','Pleiku City','pleiku','64',4),
            ('623','An Kh√™','An Khe','Th·ªã x√£ An Kh√™','An Khe Town','an_khe','64',6),
            ('624','Ayun Pa','Ayun Pa','Th·ªã x√£ Ayun Pa','Ayun Pa Town','ayun_pa','64',6),
            ('625','KBang','KBang','Huy·ªán KBang','KBang District','kbang','64',7),
            ('626','ƒêƒÉk ƒêoa','Dak Doa','Huy·ªán ƒêƒÉk ƒêoa','Dak Doa District','dak_doa','64',7),
            ('627','Ch∆∞ PƒÉh','Chu Pah','Huy·ªán Ch∆∞ PƒÉh','Chu Pah District','chu_pah','64',7),
            ('628','Ia Grai','Ia Grai','Huy·ªán Ia Grai','Ia Grai District','ia_grai','64',7)
        ON DUPLICATE KEY UPDATE
            Name                 = VALUES(Name),
            NameEn               = VALUES(NameEn),
            FullName             = VALUES(FullName),
            FullNameEn           = VALUES(FullNameEn),
            CodeName             = VALUES(CodeName),
            ProvinceCode         = VALUES(ProvinceCode),
            AdministrativeUnitID = VALUES(AdministrativeUnitID)
    `);

    await pool.execute(`
        INSERT INTO Districts(DistrictCode, Name, NameEn, FullName, FullNameEn, CodeName, ProvinceCode, AdministrativeUnitID) VALUES
            ('629','Mang Yang','Mang Yang','Huy·ªán Mang Yang','Mang Yang District','mang_yang','64',7),
            ('630','K√¥ng Chro','Kong Chro','Huy·ªán K√¥ng Chro','Kong Chro District','kong_chro','64',7),
            ('631','ƒê·ª©c C∆°','Duc Co','Huy·ªán ƒê·ª©c C∆°','Duc Co District','duc_co','64',7),
            ('632','Ch∆∞ Pr√¥ng','Chu Prong','Huy·ªán Ch∆∞ Pr√¥ng','Chu Prong District','chu_prong','64',7),
            ('633','Ch∆∞ S√™','Chu Se','Huy·ªán Ch∆∞ S√™','Chu Se District','chu_se','64',7),
            ('634','ƒêƒÉk P∆°','Dak Po','Huy·ªán ƒêƒÉk P∆°','Dak Po District','dak_po','64',7),
            ('635','Ia Pa','Ia Pa','Huy·ªán Ia Pa','Ia Pa District','ia_pa','64',7),
            ('637','Kr√¥ng Pa','Krong Pa','Huy·ªán Kr√¥ng Pa','Krong Pa District','krong_pa','64',7),
            ('638','Ph√∫ Thi·ªán','Phu Thien','Huy·ªán Ph√∫ Thi·ªán','Phu Thien District','phu_thien','64',7),
            ('639','Ch∆∞ P∆∞h','Chu Puh','Huy·ªán Ch∆∞ P∆∞h','Chu Puh District','chu_puh','64',7),
            ('643','Bu√¥n Ma Thu·ªôt','Buon Ma Thuot','Th√†nh ph·ªë Bu√¥n Ma Thu·ªôt','Buon Ma Thuot City','buon_ma_thuot','66',4),
            ('644','Bu√¥n H·ªì','Buon Ho','Th·ªã x√£ Bu√¥n H·ªì','Buon Ho Town','buon_ho','66',6),
            ('645','Ea H''leo','Ea H''leo','Huy·ªán Ea H''leo','Ea H''leo District','ea_hleo','66',7),
            ('646','Ea S√∫p','Ea Sup','Huy·ªán Ea S√∫p','Ea Sup District','ea_sup','66',7),
            ('647','Bu√¥n ƒê√¥n','Buon Don','Huy·ªán Bu√¥n ƒê√¥n','Buon Don District','buon_don','66',7),
            ('648','C∆∞ M''gar','Cu M''gar','Huy·ªán C∆∞ M''gar','Cu M''gar District','cu_mgar','66',7),
            ('649','Kr√¥ng B√∫k','Krong Buk','Huy·ªán Kr√¥ng B√∫k','Krong Buk District','krong_buk','66',7),
            ('650','Kr√¥ng NƒÉng','Krong Nang','Huy·ªán Kr√¥ng NƒÉng','Krong Nang District','krong_nang','66',7),
            ('651','Ea Kar','Ea Kar','Huy·ªán Ea Kar','Ea Kar District','ea_kar','66',7),
            ('652','M''ƒêr·∫Øk','M''Drak','Huy·ªán M''ƒêr·∫Øk','M''Drak District','mdrak','66',7),
            ('653','Kr√¥ng B√¥ng','Krong Bong','Huy·ªán Kr√¥ng B√¥ng','Krong Bong District','krong_bong','66',7),
            ('654','Kr√¥ng P·∫Øc','Krong Pac','Huy·ªán Kr√¥ng P·∫Øc','Krong Pac District','krong_pac','66',7),
            ('655','Kr√¥ng A Na','Krong A Na','Huy·ªán Kr√¥ng A Na','Krong A Na District','krong_a_na','66',7),
            ('656','L·∫Øk','Lak','Huy·ªán L·∫Øk','Lak District','lak','66',7),
            ('657','C∆∞ Kuin','Cu Kuin','Huy·ªán C∆∞ Kuin','Cu Kuin District','cu_kuin','66',7),
            ('660','Gia Nghƒ©a','Gia Nghia','Th√†nh ph·ªë Gia Nghƒ©a','Gia Nghia City','gia_nghia','67',4),
            ('661','ƒêƒÉk Glong','Dak Glong','Huy·ªán ƒêƒÉk Glong','Dak Glong District','dak_glong','67',7),
            ('662','C∆∞ J√∫t','Cu Jut','Huy·ªán C∆∞ J√∫t','Cu Jut District','cu_jut','67',7),
            ('663','ƒê·∫Øk Mil','Dak Mil','Huy·ªán ƒê·∫Øk Mil','Dak Mil District','dak_mil','67',7),
            ('664','Kr√¥ng N√¥','Krong No','Huy·ªán Kr√¥ng N√¥','Krong No District','krong_no','67',7),
            ('665','ƒê·∫Øk Song','Dak Song','Huy·ªán ƒê·∫Øk Song','Dak Song District','dak_song','67',7),
            ('666','ƒê·∫Øk R''L·∫•p','Dak R''Lap','Huy·ªán ƒê·∫Øk R''L·∫•p','Dak R''Lap District','dak_rlap','67',7),
            ('667','Tuy ƒê·ª©c','Tuy Duc','Huy·ªán Tuy ƒê·ª©c','Tuy Duc District','tuy_duc','67',7),
            ('672','ƒê√† L·∫°t','Da Lat','Th√†nh ph·ªë ƒê√† L·∫°t','Da Lat City','da_lat','68',4),
            ('673','B·∫£o L·ªôc','Bao Loc','Th√†nh ph·ªë B·∫£o L·ªôc','Bao Loc City','bao_loc','68',4),
            ('674','ƒêam R√¥ng','Dam Rong','Huy·ªán ƒêam R√¥ng','Dam Rong District','dam_rong','68',7),
            ('675','L·∫°c D∆∞∆°ng','Lac Duong','Huy·ªán L·∫°c D∆∞∆°ng','Lac Duong District','lac_duong','68',7),
            ('676','L√¢m H√†','Lam Ha','Huy·ªán L√¢m H√†','Lam Ha District','lam_ha','68',7),
            ('677','ƒê∆°n D∆∞∆°ng','Don Duong','Huy·ªán ƒê∆°n D∆∞∆°ng','Don Duong District','don_duong','68',7),
            ('678','ƒê·ª©c Tr·ªçng','Duc Trong','Huy·ªán ƒê·ª©c Tr·ªçng','Duc Trong District','duc_trong','68',7),
            ('679','Di Linh','Di Linh','Huy·ªán Di Linh','Di Linh District','di_linh','68',7),
            ('680','B·∫£o L√¢m','Bao Lam','Huy·ªán B·∫£o L√¢m','Bao Lam District','bao_lam','68',7),
            ('682','ƒê·∫° T·∫ªh','Da Teh','Huy·ªán ƒê·∫° T·∫ªh','Da Teh District','da_teh','68',7),
            ('688','Ph∆∞·ªõc Long','Phuoc Long','Th·ªã x√£ Ph∆∞·ªõc Long','Phuoc Long Town','phuoc_long','70',6),
            ('689','ƒê·ªìng Xo√†i','Dong Xoai','Th√†nh ph·ªë ƒê·ªìng Xo√†i','Dong Xoai City','dong_xoai','70',4),
            ('690','B√¨nh Long','Binh Long','Th·ªã x√£ B√¨nh Long','Binh Long Town','binh_long','70',6),
            ('691','B√π Gia M·∫≠p','Bu Gia Map','Huy·ªán B√π Gia M·∫≠p','Bu Gia Map District','bu_gia_map','70',7),
            ('692','L·ªôc Ninh','Loc Ninh','Huy·ªán L·ªôc Ninh','Loc Ninh District','loc_ninh','70',7),
            ('693','B√π ƒê·ªëp','Bu Dop','Huy·ªán B√π ƒê·ªëp','Bu Dop District','bu_dop','70',7),
            ('694','H·ªõn Qu·∫£n','Hon Quan','Huy·ªán H·ªõn Qu·∫£n','Hon Quan District','hon_quan','70',7),
            ('695','ƒê·ªìng Ph√∫','Dong Phu','Huy·ªán ƒê·ªìng Ph√∫','Dong Phu District','dong_phu','70',7),
            ('696','B√π ƒêƒÉng','Bu Dang','Huy·ªán B√π ƒêƒÉng','Bu Dang District','bu_dang','70',7),
            ('697','Ch∆°n Th√†nh','Chon Thanh','Th·ªã x√£ Ch∆°n Th√†nh','Chon Thanh Town','chon_thanh','70',6),
            ('698','Ph√∫ Ri·ªÅng','Phu Rieng','Huy·ªán Ph√∫ Ri·ªÅng','Phu Rieng District','phu_rieng','70',7),
            ('703','T√¢y Ninh','Tay Ninh','Th√†nh ph·ªë T√¢y Ninh','Tay Ninh City','tay_ninh','72',4),
            ('705','T√¢n Bi√™n','Tan Bien','Huy·ªán T√¢n Bi√™n','Tan Bien District','tan_bien','72',7),
            ('706','T√¢n Ch√¢u','Tan Chau','Huy·ªán T√¢n Ch√¢u','Tan Chau District','tan_chau','72',7),
            ('707','D∆∞∆°ng Minh Ch√¢u','Duong Minh Chau','Huy·ªán D∆∞∆°ng Minh Ch√¢u','Duong Minh Chau District','duong_minh_chau','72',7),
            ('708','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','72',7),
            ('709','H√≤a Th√†nh','Hoa Thanh','Th·ªã x√£ H√≤a Th√†nh','Hoa Thanh Town','hoa_thanh','72',6),
            ('710','G√≤ D·∫ßu','Go Dau','Huy·ªán G√≤ D·∫ßu','Go Dau District','go_dau','72',7),
            ('711','B·∫øn C·∫ßu','Ben Cau','Huy·ªán B·∫øn C·∫ßu','Ben Cau District','ben_cau','72',7),
            ('712','Tr·∫£ng B√†ng','Trang Bang','Th·ªã x√£ Tr·∫£ng B√†ng','Trang Bang Town','trang_bang','72',6),
            ('718','Th·ªß D·∫ßu M·ªôt','Thu Dau Mot','Th√†nh ph·ªë Th·ªß D·∫ßu M·ªôt','Thu Dau Mot City','thu_dau_mot','74',4),
            ('719','B√†u B√†ng','Bau Bang','Huy·ªán B√†u B√†ng','Bau Bang District','bau_bang','74',7),
            ('720','D·∫ßu Ti·∫øng','Dau Tieng','Huy·ªán D·∫ßu Ti·∫øng','Dau Tieng District','dau_tieng','74',7),
            ('721','B·∫øn C√°t','Ben Cat','Th√†nh ph·ªë B·∫øn C√°t','Ben Cat City','ben_cat','74',4),
            ('722','Ph√∫ Gi√°o','Phu Giao','Huy·ªán Ph√∫ Gi√°o','Phu Giao District','phu_giao','74',7),
            ('723','T√¢n Uy√™n','Tan Uyen','Th√†nh ph·ªë T√¢n Uy√™n','Tan Uyen City','tan_uyen','74',4),
            ('724','Dƒ© An','Di An','Th√†nh ph·ªë Dƒ© An','Di An City','di_an','74',4),
            ('725','Thu·∫≠n An','Thuan An','Th√†nh ph·ªë Thu·∫≠n An','Thuan An City','thuan_an','74',4),
            ('726','B·∫Øc T√¢n Uy√™n','Bac Tan Uyen','Huy·ªán B·∫Øc T√¢n Uy√™n','Bac Tan Uyen District','bac_tan_uyen','74',7),
            ('731','Bi√™n H√≤a','Bien Hoa','Th√†nh ph·ªë Bi√™n H√≤a','Bien Hoa City','bien_hoa','75',4),
            ('732','Long Kh√°nh','Long Khanh','Th√†nh ph·ªë Long Kh√°nh','Long Khanh City','long_khanh','75',4),
            ('734','T√¢n Ph√∫','Tan Phu','Huy·ªán T√¢n Ph√∫','Tan Phu District','tan_phu','75',7),
            ('735','Vƒ©nh C·ª≠u','Vinh Cuu','Huy·ªán Vƒ©nh C·ª≠u','Vinh Cuu District','vinh_cuu','75',7),
            ('736','ƒê·ªãnh Qu√°n','Dinh Quan','Huy·ªán ƒê·ªãnh Qu√°n','Dinh Quan District','dinh_quan','75',7),
            ('737','Tr·∫£ng Bom','Trang Bom','Huy·ªán Tr·∫£ng Bom','Trang Bom District','trang_bom','75',7),
            ('738','Th·ªëng Nh·∫•t','Thong Nhat','Huy·ªán Th·ªëng Nh·∫•t','Thong Nhat District','thong_nhat','75',7),
            ('739','C·∫©m M·ªπ','Cam My','Huy·ªán C·∫©m M·ªπ','Cam My District','cam_my','75',7),
            ('740','Long Th√†nh','Long Thanh','Huy·ªán Long Th√†nh','Long Thanh District','long_thanh','75',7),
            ('741','Xu√¢n L·ªôc','Xuan Loc','Huy·ªán Xu√¢n L·ªôc','Xuan Loc District','xuan_loc','75',7),
            ('742','Nh∆°n Tr·∫°ch','Nhon Trach','Huy·ªán Nh∆°n Tr·∫°ch','Nhon Trach District','nhon_trach','75',7),
            ('747','V≈©ng T√†u','Vung Tau','Th√†nh ph·ªë V≈©ng T√†u','Vung Tau City','vung_tau','77',4),
            ('748','B√† R·ªãa','Ba Ria','Th√†nh ph·ªë B√† R·ªãa','Ba Ria City','ba_ria','77',4),
            ('750','Ch√¢u ƒê·ª©c','Chau Duc','Huy·ªán Ch√¢u ƒê·ª©c','Chau Duc District','chau_duc','77',7),
            ('751','Xuy√™n M·ªôc','Xuyen Moc','Huy·ªán Xuy√™n M·ªôc','Xuyen Moc District','xuyen_moc','77',7),
            ('753','Long ƒê·∫•t','Long Dat','Huy·ªán Long ƒê·∫•t','Long Dat District','long_dat','77',7),
            ('754','Ph√∫ M·ªπ','Phu My','Th√†nh ph·ªë Ph√∫ M·ªπ','Phu My City','phu_my','77',4),
            ('755','C√¥n ƒê·∫£o','Con Dao','Huy·ªán C√¥n ƒê·∫£o','Con Dao District','con_dao','77',7),
            ('760','1','1','Qu·∫≠n 1','District 1','1','79',5),
            ('761','12','12','Qu·∫≠n 12','District 12','12','79',5),
            ('764','G√≤ V·∫•p','Go Vap','Qu·∫≠n G√≤ V·∫•p','Go Vap District','go_vap','79',5),
            ('765','B√¨nh Th·∫°nh','Binh Thanh','Qu·∫≠n B√¨nh Th·∫°nh','Binh Thanh District','binh_thanh','79',5),
            ('766','T√¢n B√¨nh','Tan Binh','Qu·∫≠n T√¢n B√¨nh','Tan Binh District','tan_binh','79',5),
            ('767','T√¢n Ph√∫','Tan Phu','Qu·∫≠n T√¢n Ph√∫','Tan Phu District','tan_phu','79',5),
            ('768','Ph√∫ Nhu·∫≠n','Phu Nhuan','Qu·∫≠n Ph√∫ Nhu·∫≠n','Phu Nhuan District','phu_nhuan','79',5),
            ('769','Th·ªß ƒê·ª©c','Thu Duc','Th√†nh ph·ªë Th·ªß ƒê·ª©c','Thu Duc City','thu_duc','79',3),
            ('770','3','3','Qu·∫≠n 3','District 3','3','79',5),
            ('771','10','10','Qu·∫≠n 10','District 10','10','79',5),
            ('772','11','11','Qu·∫≠n 11','District 11','11','79',5),
            ('773','4','4','Qu·∫≠n 4','District 4','4','79',5),
            ('774','5','5','Qu·∫≠n 5','District 5','5','79',5),
            ('775','6','6','Qu·∫≠n 6','District 6','6','79',5),
            ('776','8','8','Qu·∫≠n 8','District 8','8','79',5),
            ('777','B√¨nh T√¢n','Binh Tan','Qu·∫≠n B√¨nh T√¢n','Binh Tan District','binh_tan','79',5),
            ('778','7','7','Qu·∫≠n 7','District 7','7','79',5),
            ('783','C·ªß Chi','Cu Chi','Huy·ªán C·ªß Chi','Cu Chi District','cu_chi','79',7),
            ('784','H√≥c M√¥n','Hoc Mon','Huy·ªán H√≥c M√¥n','Hoc Mon District','hoc_mon','79',7),
            ('785','B√¨nh Ch√°nh','Binh Chanh','Huy·ªán B√¨nh Ch√°nh','Binh Chanh District','binh_chanh','79',7),
            ('786','Nh√† B√®','Nha Be','Huy·ªán Nh√† B√®','Nha Be District','nha_be','79',7),
            ('787','C·∫ßn Gi·ªù','Can Gio','Huy·ªán C·∫ßn Gi·ªù','Can Gio District','can_gio','79',7),
            ('794','T√¢n An','Tan An','Th√†nh ph·ªë T√¢n An','Tan An City','tan_an','80',4),
            ('795','Ki·∫øn T∆∞·ªùng','Kien Tuong','Th·ªã x√£ Ki·∫øn T∆∞·ªùng','Kien Tuong Town','kien_tuong','80',6),
            ('796','T√¢n H∆∞ng','Tan Hung','Huy·ªán T√¢n H∆∞ng','Tan Hung District','tan_hung','80',7),
            ('797','Vƒ©nh H∆∞ng','Vinh Hung','Huy·ªán Vƒ©nh H∆∞ng','Vinh Hung District','vinh_hung','80',7),
            ('798','M·ªôc H√≥a','Moc Hoa','Huy·ªán M·ªôc H√≥a','Moc Hoa District','moc_hoa','80',7),
            ('799','T√¢n Th·∫°nh','Tan Thanh','Huy·ªán T√¢n Th·∫°nh','Tan Thanh District','tan_thanh','80',7),
            ('800','Th·∫°nh H√≥a','Thanh Hoa','Huy·ªán Th·∫°nh H√≥a','Thanh Hoa District','thanh_hoa','80',7),
            ('801','ƒê·ª©c Hu·ªá','Duc Hue','Huy·ªán ƒê·ª©c Hu·ªá','Duc Hue District','duc_hue','80',7),
            ('802','ƒê·ª©c H√≤a','Duc Hoa','Huy·ªán ƒê·ª©c H√≤a','Duc Hoa District','duc_hoa','80',7),
            ('803','B·∫øn L·ª©c','Ben Luc','Huy·ªán B·∫øn L·ª©c','Ben Luc District','ben_luc','80',7),
            ('804','Th·ªß Th·ª´a','Thu Thua','Huy·ªán Th·ªß Th·ª´a','Thu Thua District','thu_thua','80',7),
            ('805','T√¢n Tr·ª•','Tan Tru','Huy·ªán T√¢n Tr·ª•','Tan Tru District','tan_tru','80',7),
            ('806','C·∫ßn ƒê∆∞·ªõc','Can Duoc','Huy·ªán C·∫ßn ƒê∆∞·ªõc','Can Duoc District','can_duoc','80',7),
            ('807','C·∫ßn Giu·ªôc','Can Giuoc','Huy·ªán C·∫ßn Giu·ªôc','Can Giuoc District','can_giuoc','80',7),
            ('808','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','80',7),
            ('815','M·ªπ Tho','My Tho','Th√†nh ph·ªë M·ªπ Tho','My Tho City','my_tho','82',4),
            ('816','G√≤ C√¥ng','Go Cong','Th√†nh ph·ªë G√≤ C√¥ng','Go Cong City','go_cong','82',4),
            ('817','Cai L·∫≠y','Cai Lay','Th·ªã x√£ Cai L·∫≠y','Cai Lay Town','cai_lay','82',6),
            ('818','T√¢n Ph∆∞·ªõc','Tan Phuoc','Huy·ªán T√¢n Ph∆∞·ªõc','Tan Phuoc District','tan_phuoc','82',7),
            ('819','C√°i B√®','Cai Be','Huy·ªán C√°i B√®','Cai Be District','cai_be','82',7),
            ('820','Cai L·∫≠y','Cai Lay','Huy·ªán Cai L·∫≠y','Cai Lay District','cai_lay','82',7),
            ('821','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','82',7),
            ('822','Ch·ª£ G·∫°o','Cho Gao','Huy·ªán Ch·ª£ G·∫°o','Cho Gao District','cho_gao','82',7),
            ('823','G√≤ C√¥ng T√¢y','Go Cong Tay','Huy·ªán G√≤ C√¥ng T√¢y','Go Cong Tay District','go_cong_tay','82',7),
            ('824','G√≤ C√¥ng ƒê√¥ng','Go Cong Dong','Huy·ªán G√≤ C√¥ng ƒê√¥ng','Go Cong Dong District','go_cong_dong','82',7),
            ('825','T√¢n Ph√∫ ƒê√¥ng','Tan Phu Dong','Huy·ªán T√¢n Ph√∫ ƒê√¥ng','Tan Phu Dong District','tan_phu_dong','82',7),
            ('829','B·∫øn Tre','Ben Tre','Th√†nh ph·ªë B·∫øn Tre','Ben Tre City','ben_tre','83',4),
            ('831','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','83',7),
            ('832','Ch·ª£ L√°ch','Cho Lach','Huy·ªán Ch·ª£ L√°ch','Cho Lach District','cho_lach','83',7),
            ('833','M·ªè C√†y Nam','Mo Cay Nam','Huy·ªán M·ªè C√†y Nam','Mo Cay Nam District','mo_cay_nam','83',7),
            ('834','Gi·ªìng Tr√¥m','Giong Trom','Huy·ªán Gi·ªìng Tr√¥m','Giong Trom District','giong_trom','83',7),
            ('835','B√¨nh ƒê·∫°i','Binh Dai','Huy·ªán B√¨nh ƒê·∫°i','Binh Dai District','binh_dai','83',7),
            ('836','Ba Tri','Ba Tri','Huy·ªán Ba Tri','Ba Tri District','ba_tri','83',7),
            ('837','Th·∫°nh Ph√∫','Thanh Phu','Huy·ªán Th·∫°nh Ph√∫','Thanh Phu District','thanh_phu','83',7),
            ('838','M·ªè C√†y B·∫Øc','Mo Cay Bac','Huy·ªán M·ªè C√†y B·∫Øc','Mo Cay Bac District','mo_cay_bac','83',7),
            ('842','Tr√† Vinh','Tra Vinh','Th√†nh ph·ªë Tr√† Vinh','Tra Vinh City','tra_vinh','84',4),
            ('844','C√†ng Long','Cang Long','Huy·ªán C√†ng Long','Cang Long District','cang_long','84',7),
            ('845','C·∫ßu K√®','Cau Ke','Huy·ªán C·∫ßu K√®','Cau Ke District','cau_ke','84',7)
        ON DUPLICATE KEY UPDATE
            Name                 = VALUES(Name),
            NameEn               = VALUES(NameEn),
            FullName             = VALUES(FullName),
            FullNameEn           = VALUES(FullNameEn),
            CodeName             = VALUES(CodeName),
            ProvinceCode         = VALUES(ProvinceCode),
            AdministrativeUnitID = VALUES(AdministrativeUnitID)
    `);

    await pool.execute(`
        INSERT INTO Districts(DistrictCode, Name, NameEn, FullName, FullNameEn, CodeName, ProvinceCode, AdministrativeUnitID) VALUES
            ('846','Ti·ªÉu C·∫ßn','Tieu Can','Huy·ªán Ti·ªÉu C·∫ßn','Tieu Can District','tieu_can','84',7),
            ('847','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','84',7),
            ('848','C·∫ßu Ngang','Cau Ngang','Huy·ªán C·∫ßu Ngang','Cau Ngang District','cau_ngang','84',7),
            ('849','Tr√† C√∫','Tra Cu','Huy·ªán Tr√† C√∫','Tra Cu District','tra_cu','84',7),
            ('850','Duy√™n H·∫£i','Duyen Hai','Huy·ªán Duy√™n H·∫£i','Duyen Hai District','duyen_hai','84',7),
            ('851','Duy√™n H·∫£i','Duyen Hai','Th·ªã x√£ Duy√™n H·∫£i','Duyen Hai Town','duyen_hai','84',6),
            ('855','Vƒ©nh Long','Vinh Long','Th√†nh ph·ªë Vƒ©nh Long','Vinh Long City','vinh_long','86',4),
            ('857','Long H·ªì','Long Ho','Huy·ªán Long H·ªì','Long Ho District','long_ho','86',7),
            ('858','Mang Th√≠t','Mang Thit','Huy·ªán Mang Th√≠t','Mang Thit District','mang_thit','86',7),
            ('859','V≈©ng Li√™m','Vung Liem','Huy·ªán V≈©ng Li√™m','Vung Liem District','vung_liem','86',7),
            ('860','Tam B√¨nh','Tam Binh','Huy·ªán Tam B√¨nh','Tam Binh District','tam_binh','86',7),
            ('861','B√¨nh Minh','Binh Minh','Th·ªã x√£ B√¨nh Minh','Binh Minh Town','binh_minh','86',6),
            ('862','Tr√† √în','Tra On','Huy·ªán Tr√† √în','Tra On District','tra_on','86',7),
            ('863','B√¨nh T√¢n','Binh Tan','Huy·ªán B√¨nh T√¢n','Binh Tan District','binh_tan','86',7),
            ('866','Cao L√£nh','Cao Lanh','Th√†nh ph·ªë Cao L√£nh','Cao Lanh City','cao_lanh','87',4),
            ('867','Sa ƒê√©c','Sa Dec','Th√†nh ph·ªë Sa ƒê√©c','Sa Dec City','sa_dec','87',4),
            ('868','H·ªìng Ng·ª±','Hong Ngu','Th√†nh ph·ªë H·ªìng Ng·ª±','Hong Ngu City','hong_ngu','87',4),
            ('869','T√¢n H·ªìng','Tan Hong','Huy·ªán T√¢n H·ªìng','Tan Hong District','tan_hong','87',7),
            ('870','H·ªìng Ng·ª±','Hong Ngu','Huy·ªán H·ªìng Ng·ª±','Hong Ngu District','hong_ngu','87',7),
            ('871','Tam N√¥ng','Tam Nong','Huy·ªán Tam N√¥ng','Tam Nong District','tam_nong','87',7),
            ('872','Th√°p M∆∞·ªùi','Thap Muoi','Huy·ªán Th√°p M∆∞·ªùi','Thap Muoi District','thap_muoi','87',7),
            ('873','Cao L√£nh','Cao Lanh','Huy·ªán Cao L√£nh','Cao Lanh District','cao_lanh','87',7),
            ('874','Thanh B√¨nh','Thanh Binh','Huy·ªán Thanh B√¨nh','Thanh Binh District','thanh_binh','87',7),
            ('875','L·∫•p V√≤','Lap Vo','Huy·ªán L·∫•p V√≤','Lap Vo District','lap_vo','87',7),
            ('876','Lai Vung','Lai Vung','Huy·ªán Lai Vung','Lai Vung District','lai_vung','87',7),
            ('877','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','87',7),
            ('883','Long Xuy√™n','Long Xuyen','Th√†nh ph·ªë Long Xuy√™n','Long Xuyen City','long_xuyen','89',4),
            ('884','Ch√¢u ƒê·ªëc','Chau Doc','Th√†nh ph·ªë Ch√¢u ƒê·ªëc','Chau Doc City','chau_doc','89',4),
            ('886','An Ph√∫','An Phu','Huy·ªán An Ph√∫','An Phu District','an_phu','89',7),
            ('887','T√¢n Ch√¢u','Tan Chau','Th·ªã x√£ T√¢n Ch√¢u','Tan Chau Town','tan_chau','89',6),
            ('888','Ph√∫ T√¢n','Phu Tan','Huy·ªán Ph√∫ T√¢n','Phu Tan District','phu_tan','89',7),
            ('889','Ch√¢u Ph√∫','Chau Phu','Huy·ªán Ch√¢u Ph√∫','Chau Phu District','chau_phu','89',7),
            ('890','T·ªãnh Bi√™n','Tinh Bien','Th·ªã x√£ T·ªãnh Bi√™n','Tinh Bien Town','tinh_bien','89',6),
            ('891','Tri T√¥n','Tri Ton','Huy·ªán Tri T√¥n','Tri Ton District','tri_ton','89',7),
            ('892','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','89',7),
            ('893','Ch·ª£ M·ªõi','Cho Moi','Huy·ªán Ch·ª£ M·ªõi','Cho Moi District','cho_moi','89',7),
            ('894','Tho·∫°i S∆°n','Thoai Son','Huy·ªán Tho·∫°i S∆°n','Thoai Son District','thoai_son','89',7),
            ('899','R·∫°ch Gi√°','Rach Gia','Th√†nh ph·ªë R·∫°ch Gi√°','Rach Gia City','rach_gia','91',4),
            ('900','H√† Ti√™n','Ha Tien','Th√†nh ph·ªë H√† Ti√™n','Ha Tien City','ha_tien','91',4),
            ('902','Ki√™n L∆∞∆°ng','Kien Luong','Huy·ªán Ki√™n L∆∞∆°ng','Kien Luong District','kien_luong','91',7),
            ('903','H√≤n ƒê·∫•t','Hon Dat','Huy·ªán H√≤n ƒê·∫•t','Hon Dat District','hon_dat','91',7),
            ('904','T√¢n Hi·ªáp','Tan Hiep','Huy·ªán T√¢n Hi·ªáp','Tan Hiep District','tan_hiep','91',7),
            ('905','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','91',7),
            ('906','Gi·ªìng Ri·ªÅng','Giong Rieng','Huy·ªán Gi·ªìng Ri·ªÅng','Giong Rieng District','giong_rieng','91',7),
            ('907','G√≤ Quao','Go Quao','Huy·ªán G√≤ Quao','Go Quao District','go_quao','91',7),
            ('908','An Bi√™n','An Bien','Huy·ªán An Bi√™n','An Bien District','an_bien','91',7),
            ('909','An Minh','An Minh','Huy·ªán An Minh','An Minh District','an_minh','91',7),
            ('910','Vƒ©nh Thu·∫≠n','Vinh Thuan','Huy·ªán Vƒ©nh Thu·∫≠n','Vinh Thuan District','vinh_thuan','91',7),
            ('911','Ph√∫ Qu·ªëc','Phu Quoc','Th√†nh ph·ªë Ph√∫ Qu·ªëc','Phu Quoc City','phu_quoc','91',4),
            ('912','Ki√™n H·∫£i','Kien Hai','Huy·ªán Ki√™n H·∫£i','Kien Hai District','kien_hai','91',7),
            ('913','U Minh Th∆∞·ª£ng','U Minh Thuong','Huy·ªán U Minh Th∆∞·ª£ng','U Minh Thuong District','u_minh_thuong','91',7),
            ('914','Giang Th√†nh','Giang Thanh','Huy·ªán Giang Th√†nh','Giang Thanh District','giang_thanh','91',7),
            ('916','Ninh Ki·ªÅu','Ninh Kieu','Qu·∫≠n Ninh Ki·ªÅu','Ninh Kieu District','ninh_kieu','92',5),
            ('917','√î M√¥n','O Mon','Qu·∫≠n √î M√¥n','O Mon District','o_mon','92',5),
            ('918','B√¨nh Thu·ª∑','Binh Thuy','Qu·∫≠n B√¨nh Thu·ª∑','Binh Thuy District','binh_thuy','92',5),
            ('919','C√°i RƒÉng','Cai Rang','Qu·∫≠n C√°i RƒÉng','Cai Rang District','cai_rang','92',5),
            ('923','Th·ªët N·ªët','Thot Not','Qu·∫≠n Th·ªët N·ªët','Thot Not District','thot_not','92',5),
            ('924','Vƒ©nh Th·∫°nh','Vinh Thanh','Huy·ªán Vƒ©nh Th·∫°nh','Vinh Thanh District','vinh_thanh','92',7),
            ('925','C·ªù ƒê·ªè','Co Do','Huy·ªán C·ªù ƒê·ªè','Co Do District','co_do','92',7),
            ('926','Phong ƒêi·ªÅn','Phong Dien','Huy·ªán Phong ƒêi·ªÅn','Phong Dien District','phong_dien','92',7),
            ('927','Th·ªõi Lai','Thoi Lai','Huy·ªán Th·ªõi Lai','Thoi Lai District','thoi_lai','92',7),
            ('930','V·ªã Thanh','Vi Thanh','Th√†nh ph·ªë V·ªã Thanh','Vi Thanh City','vi_thanh','93',4),
            ('931','Ng√£ B·∫£y','Nga Bay','Th√†nh ph·ªë Ng√£ B·∫£y','Nga Bay City','nga_bay','93',4),
            ('932','Ch√¢u Th√†nh A','Chau Thanh A','Huy·ªán Ch√¢u Th√†nh A','Chau Thanh A District','chau_thanh_a','93',7),
            ('933','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','93',7),
            ('934','Ph·ª•ng Hi·ªáp','Phung Hiep','Huy·ªán Ph·ª•ng Hi·ªáp','Phung Hiep District','phung_hiep','93',7),
            ('935','V·ªã Thu·ª∑','Vi Thuy','Huy·ªán V·ªã Thu·ª∑','Vi Thuy District','vi_thuy','93',7),
            ('936','Long M·ªπ','Long My','Huy·ªán Long M·ªπ','Long My District','long_my','93',7),
            ('937','Long M·ªπ','Long My','Th·ªã x√£ Long M·ªπ','Long My Town','long_my','93',6),
            ('941','S√≥c TrƒÉng','Soc Trang','Th√†nh ph·ªë S√≥c TrƒÉng','Soc Trang City','soc_trang','94',4),
            ('942','Ch√¢u Th√†nh','Chau Thanh','Huy·ªán Ch√¢u Th√†nh','Chau Thanh District','chau_thanh','94',7),
            ('943','K·∫ø S√°ch','Ke Sach','Huy·ªán K·∫ø S√°ch','Ke Sach District','ke_sach','94',7),
            ('944','M·ªπ T√∫','My Tu','Huy·ªán M·ªπ T√∫','My Tu District','my_tu','94',7),
            ('945','C√π Lao Dung','Cu Lao Dung','Huy·ªán C√π Lao Dung','Cu Lao Dung District','cu_lao_dung','94',7),
            ('946','Long Ph√∫','Long Phu','Huy·ªán Long Ph√∫','Long Phu District','long_phu','94',7),
            ('947','M·ªπ Xuy√™n','My Xuyen','Huy·ªán M·ªπ Xuy√™n','My Xuyen District','my_xuyen','94',7),
            ('948','Ng√£ NƒÉm','Nga Nam','Th·ªã x√£ Ng√£ NƒÉm','Nga Nam Town','nga_nam','94',6),
            ('949','Th·∫°nh Tr·ªã','Thanh Tri','Huy·ªán Th·∫°nh Tr·ªã','Thanh Tri District','thanh_tri','94',7),
            ('950','Vƒ©nh Ch√¢u','Vinh Chau','Th·ªã x√£ Vƒ©nh Ch√¢u','Vinh Chau Town','vinh_chau','94',6),
            ('951','Tr·∫ßn ƒê·ªÅ','Tran De','Huy·ªán Tr·∫ßn ƒê·ªÅ','Tran De District','tran_de','94',7),
            ('954','B·∫°c Li√™u','Bac Lieu','Th√†nh ph·ªë B·∫°c Li√™u','Bac Lieu City','bac_lieu','95',4),
            ('956','H·ªìng D√¢n','Hong Dan','Huy·ªán H·ªìng D√¢n','Hong Dan District','hong_dan','95',7),
            ('957','Ph∆∞·ªõc Long','Phuoc Long','Huy·ªán Ph∆∞·ªõc Long','Phuoc Long District','phuoc_long','95',7),
            ('958','Vƒ©nh L·ª£i','Vinh Loi','Huy·ªán Vƒ©nh L·ª£i','Vinh Loi District','vinh_loi','95',7),
            ('959','Gi√° Rai','Gia Rai','Th·ªã x√£ Gi√° Rai','Gia Rai Town','gia_rai','95',6),
            ('960','ƒê√¥ng H·∫£i','Dong Hai','Huy·ªán ƒê√¥ng H·∫£i','Dong Hai District','dong_hai','95',7),
            ('961','H√≤a B√¨nh','Hoa Binh','Huy·ªán H√≤a B√¨nh','Hoa Binh District','hoa_binh','95',7),
            ('964','C√† Mau','Ca Mau','Th√†nh ph·ªë C√† Mau','Ca Mau City','ca_mau','96',4),
            ('966','U Minh','U Minh','Huy·ªán U Minh','U Minh District','u_minh','96',7),
            ('967','Th·ªõi B√¨nh','Thoi Binh','Huy·ªán Th·ªõi B√¨nh','Thoi Binh District','thoi_binh','96',7),
            ('968','Tr·∫ßn VƒÉn Th·ªùi','Tran Van Thoi','Huy·ªán Tr·∫ßn VƒÉn Th·ªùi','Tran Van Thoi District','tran_van_thoi','96',7),
            ('969','C√°i N∆∞·ªõc','Cai Nuoc','Huy·ªán C√°i N∆∞·ªõc','Cai Nuoc District','cai_nuoc','96',7),
            ('970','ƒê·∫ßm D∆°i','Dam Doi','Huy·ªán ƒê·∫ßm D∆°i','Dam Doi District','dam_doi','96',7),
            ('971','NƒÉm CƒÉn','Nam Can','Huy·ªán NƒÉm CƒÉn','Nam Can District','nam_can','96',7),
            ('972','Ph√∫ T√¢n','Phu Tan','Huy·ªán Ph√∫ T√¢n','Phu Tan District','phu_tan','96',7),
            ('973','Ng·ªçc Hi·ªÉn','Ngoc Hien','Huy·ªán Ng·ªçc Hi·ªÉn','Ngoc Hien District','ngoc_hien','96',7)
        ON DUPLICATE KEY UPDATE
            Name                 = VALUES(Name),
            NameEn               = VALUES(NameEn),
            FullName             = VALUES(FullName),
            FullNameEn           = VALUES(FullNameEn),
            CodeName             = VALUES(CodeName),
            ProvinceCode         = VALUES(ProvinceCode),
            AdministrativeUnitID = VALUES(AdministrativeUnitID)
    `);

    try {
        await pool.execute(`CREATE INDEX idx_Districts_Province ON Districts(ProvinceCode)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_Districts_Unit ON Districts(AdministrativeUnitID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createUsersTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Users (
            UserID INT AUTO_INCREMENT PRIMARY KEY,
            FullName VARCHAR(255) NOT NULL,
            Email VARCHAR(255) NOT NULL UNIQUE,
            HashPassword VARCHAR(255),
            PhoneNumber VARCHAR(20),
            DateOfBirth DATE NULL,
            Gender ENUM('male','female','other') NULL,
            Address VARCHAR(512) NULL,
            AvatarURL TEXT,
            Role ENUM('guest', 'admin') DEFAULT 'guest',
            Rating DECIMAL(3,2) DEFAULT 0.0,
            IsVerified TINYINT(1) DEFAULT FALSE,
            VerificationToken VARCHAR(255),
            VerificationTokenExpires DATETIME,
            ResetToken VARCHAR(255),
            ResetTokenExpires DATETIME,
            Status ENUM('active','disabled','suspended','deleted') DEFAULT 'active',
            SuspendedUntil DATETIME NULL,
            UnpaidStrikeCount INT NOT NULL DEFAULT 0,
            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )
    `);

    try {
        await pool.execute(`CREATE INDEX idx_Users_Email ON Users(Email)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Users_Status ON Users(Status)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createOAuthAccountsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS OAuthAccounts (
            ID INT AUTO_INCREMENT PRIMARY KEY,
            Provider VARCHAR(50) NOT NULL,
            ProviderUID VARCHAR(255) NOT NULL,
            UserID INT NOT NULL,
            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
            UNIQUE KEY unique_oauth (Provider, ProviderUID)
        )
    `);
}

async function createPaymentMethodsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS PaymentMethods (
            MethodID INT PRIMARY KEY,
            AccountIdentifier VARCHAR(4),
            Token TEXT,
            Provider VARCHAR(15),
            IsDefault TINYINT(1) DEFAULT 0,
            UserID INT,
            CreatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            UpdatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (UserID) REFERENCES Users(UserID)
        )
    `);
    
    try {
        await pool.execute(`CREATE INDEX idx_PaymentMethods_UserID ON PaymentMethods(UserID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createPropertiesTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Properties (
            PropertyID INT AUTO_INCREMENT PRIMARY KEY,
            PropertyName VARCHAR(255),
            PropertyImageURL VARCHAR(255)
        )
    `);
}

async function createRoomTypesTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS RoomTypes (
            RoomTypeID INT AUTO_INCREMENT PRIMARY KEY,
            RoomTypeName VARCHAR(255),
            RoomTypeImageURL VARCHAR(255)
        )
    `);
}

async function createProductsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Products (
            ProductID INT AUTO_INCREMENT PRIMARY KEY,
            UID BIGINT UNSIGNED,
            Source VARCHAR(20),
            ExternalID VARCHAR(30),
            Name VARCHAR(255),
            Address VARCHAR(255),
            ProvinceCode VARCHAR(20),
            DistrictCode VARCHAR(20),
            Latitude DECIMAL(9,6),
            Longitude DECIMAL(9,6),
            PropertyType INT,
            RoomType INT,
            MaxGuests SMALLINT,
            NumBedrooms SMALLINT,
            NumBeds SMALLINT,
            NumBathrooms SMALLINT,
            Price DECIMAL(10, 2),
            Currency VARCHAR(20),
            CleanlinessPoint FLOAT,
            LocationPoint FLOAT,
            ServicePoint FLOAT,
            ValuePoint FLOAT,
            CommunicationPoint FLOAT,
            ConveniencePoint FLOAT,
            is_deleted TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,
            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            LastSyncedAt TIMESTAMP NULL DEFAULT NULL,
            FOREIGN KEY (ProvinceCode) REFERENCES Provinces(ProvinceCode),
            FOREIGN KEY (DistrictCode) REFERENCES Districts(DistrictCode),
            FOREIGN KEY (PropertyType) REFERENCES Properties(PropertyID),
            FOREIGN KEY (RoomType) REFERENCES RoomTypes(RoomTypeID)
        )
    `);
    
    try {
        await pool.execute(`CREATE INDEX idx_Products_ProvinceCode ON Products(ProvinceCode)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_Products_DistrictCode ON Products(DistrictCode)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_Products_Price ON Products(Price)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE UNIQUE INDEX idx_Products_UID ON Products(UID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createFavoritesTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Favorites (
            FavoriteID INT AUTO_INCREMENT PRIMARY KEY,
            UserID INT NOT NULL,
            ProductID INT NOT NULL,
            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
            FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE,
            UNIQUE KEY unique_user_product (UserID, ProductID)
        );
    `);

    try {
        await pool.execute(`CREATE INDEX idx_Favorites_UserID ON Favorites(UserID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createWishlistTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Wishlist (
            WishlistID INT AUTO_INCREMENT PRIMARY KEY,
            UserID INT NOT NULL,
            ProductID INT NOT NULL,
            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
            FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE,
            UNIQUE KEY unique_user_product (UserID, ProductID)
        );
    `);

    try {
        await pool.execute(`CREATE INDEX idx_Wishlist_UserID ON Wishlist(UserID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createAmenityGroupsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS AmenityGroups (
            AmenityGroupID INT AUTO_INCREMENT PRIMARY KEY,
            AmenityGroupName VARCHAR(255)
        )
    `);
}

async function createAmenitiesTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Amenities (
            AmenityID INT AUTO_INCREMENT PRIMARY KEY,
            AmenityName VARCHAR(255),
            AmenityGroupID INT,
            AmenityImageURL VARCHAR(255),
            FOREIGN KEY (AmenityGroupID) REFERENCES AmenityGroups(AmenityGroupID)
        )
    `);
}

async function createProductAmenitiesTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS ProductAmenities (
            ProductID INT NOT NULL,
            AmenityID INT NOT NULL,
            PRIMARY KEY (ProductID, AmenityID),
            FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE,
            FOREIGN KEY (AmenityID) REFERENCES Amenities(AmenityID) ON DELETE CASCADE
        )
    `);
    
    try {
        await pool.execute(`CREATE INDEX idx_ProductAmenities_Product ON ProductAmenities(ProductID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_ProductAmenities_Amenity ON ProductAmenities(AmenityID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createAuctionTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Auction (
            AuctionID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            AuctionUID BIGINT UNSIGNED,
            ProductID INT,
            StayPeriodStart DATE,
            StayPeriodEnd DATE,
            StartTime TIMESTAMP NULL DEFAULT NULL,
            EndTime TIMESTAMP NULL DEFAULT NULL,
            MaxBidID INT UNSIGNED,
            StartPrice DECIMAL(10, 2),
            BidIncrement DECIMAL(10, 2),
            CurrentPrice DECIMAL(10, 2),
            Status ENUM('active','ended','cancelled') DEFAULT 'active',
            EndReason ENUM('natural_end','buy_now','cancelled','admin_force') NULL,
            FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
        )
    `);
    
    try {
        await pool.execute(`CREATE INDEX idx_Auction_ProductID ON Auction(ProductID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_Auction_StartTime ON Auction(StartTime)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_Auction_Status_EndTime ON Auction(Status, EndTime)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createBidsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Bids (
            BidID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            AuctionID INT UNSIGNED,
            UserID INT,
            Amount DECIMAL(9, 2),
            BidTime TIMESTAMP,
            FOREIGN KEY (AuctionID) REFERENCES Auction(AuctionID),
            FOREIGN KEY (UserID) REFERENCES Users(UserID)
        )
    `);
    
    try {
        await pool.execute(`CREATE INDEX idx_Bids_AuctionID ON Bids(AuctionID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_Bids_UserID ON Bids(UserID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

     try {
        await pool.execute(`CREATE INDEX idx_Bids_AuctionBidTime ON Bids(AuctionID, BidTime)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createBookingTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Booking (
            BookingID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            BidID INT UNSIGNED DEFAULT NULL,
            UserID INT NOT NULL,
            ProductID INT NOT NULL,
            StartDate DATE NOT NULL,
            EndDate DATE NOT NULL,
            BookingStatus ENUM('pending','confirmed','cancelled','completed','expired') DEFAULT 'pending',
            UnitPrice DECIMAL(10, 2) DEFAULT 0.0,
            Amount DECIMAL(10, 2) DEFAULT 0.0,
            ServiceFee DECIMAL(10, 2) DEFAULT 0.0,
            PaymentMethodID INT DEFAULT NULL,
            PaidAt TIMESTAMP DEFAULT NULL,
            Source ENUM('direct','auction_win','auction_buy_now') NOT NULL DEFAULT 'direct',
            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (BidID) REFERENCES Bids(BidID),
            FOREIGN KEY (UserID) REFERENCES Users(UserID),
            FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
            FOREIGN KEY (PaymentMethodID) REFERENCES PaymentMethods(MethodID)
        )
    `);

    // const dbname = dbConfig.database;
    // const triggerNames = ['bi_Booking_validate', 'bu_Booking_validate'];

    // const [trgRows] = await pool.query(
    //     `SELECT TRIGGER_NAME 
    //     FROM INFORMATION_SCHEMA.TRIGGERS 
    //     WHERE TRIGGER_SCHEMA = ? 
    //         AND TRIGGER_NAME IN (?, ?)`,
    //     [dbname, ...triggerNames]
    // );

    // for (const r of trgRows) {
    //     // schema-qualified DROP
    //     await pool.query(`DROP TRIGGER IF EXISTS \`${dbname}\`.\`${r.TRIGGER_NAME}\``);
    // }

    // const validateBody = `
    //     BEGIN
    //     END
    // `;

    // try {
    //     await pool.query(`
    //         CREATE TRIGGER \`${dbname}\`.\`bi_Booking_validate\`
    //         BEFORE INSERT ON \`${dbname}\`.\`Booking\`
    //         FOR EACH ROW
    //         ${validateBody}
    //     `);
    // } catch (error) {
    //     if (error.code !== 'ER_DUP_KEYNAME') throw error;
    // }

    // try {
    //     await pool.query(`
    //         CREATE TRIGGER \`${dbname}\`.\`bu_Booking_validate\`
    //         BEFORE UPDATE ON \`${dbname}\`.\`Booking\`
    //         FOR EACH ROW
    //         ${validateBody}
    //     `);
    // } catch (error) {
    //     if (error.code !== 'ER_DUP_KEYNAME') throw error;
    // }
    
    try {
        await pool.execute(`CREATE INDEX idx_Booking_UserID ON Booking(UserID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    try {
        await pool.execute(`CREATE INDEX idx_Booking_ProductID ON Booking(ProductID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Booking_UserStatus ON Booking(UserID, BookingStatus)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Booking_ProductDates ON Booking(ProductID, StartDate, EndDate)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createCalendarTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Calendar (
            ProductID INT NOT NULL,
            Day DATE NOT NULL,
            Status ENUM('available','reserved','booked','blocked') NOT NULL DEFAULT 'available',
            LockReason ENUM('booking_hold','manual','auction','external_sync') NULL,
            BookingID INT UNSIGNED NULL,    -- n·∫øu status=reserved/booked
            AuctionID INT UNSIGNED NULL,    -- n·∫øu status=auction
            HoldExpiresAt DATETIME NULL,  -- cho ‚Äúgi·ªØ ch·ªó t·∫°m‚Äù (reserve)
            CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            UpdatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (ProductID, Day)
        );
    `);

    const dbname = dbConfig.database;
    const triggerNames = ['bi_Calendar_validate', 'bu_Calendar_validate', 'bi_Calendar_refcheck', 'bu_Calendar_refcheck'];

    // Ki·ªÉm tra t·ªìn t·∫°i trong INFORMATION_SCHEMA r·ªìi DROP t·ª´ng c√°i
    const [trgRows] = await pool.query(
        `SELECT TRIGGER_NAME 
        FROM INFORMATION_SCHEMA.TRIGGERS 
        WHERE TRIGGER_SCHEMA = ? 
            AND TRIGGER_NAME IN (?, ?, ?, ?)`,
        [dbname, ...triggerNames]
    );

    for (const r of trgRows) {
        // schema-qualified DROP
        await pool.query(`DROP TRIGGER IF EXISTS \`${dbname}\`.\`${r.TRIGGER_NAME}\``);
    }

    const validateBody = `
        BEGIN
        IF NEW.Status = 'available' THEN
            SET NEW.BookingID = NULL,
                NEW.AuctionID = NULL,
                NEW.LockReason = NULL,
                NEW.HoldExpiresAt = NULL;

        ELSEIF NEW.Status = 'reserved' THEN
            IF NEW.LockReason IS NULL THEN SET NEW.LockReason = 'booking_hold'; END IF;
            IF NOT (NEW.LockReason = 'booking_hold' AND NEW.BookingID IS NOT NULL AND NEW.HoldExpiresAt IS NOT NULL) THEN
            SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'reserved: require LockReason=booking_hold, BookingID, HoldExpiresAt';
            END IF;
            SET NEW.AuctionID = NULL;

        ELSEIF NEW.Status = 'booked' THEN
            IF NEW.BookingID IS NULL THEN
            SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'booked: require BookingID';
            END IF;
            SET NEW.LockReason = NULL,
                NEW.HoldExpiresAt = NULL,
                NEW.AuctionID = NULL;

        ELSEIF NEW.Status = 'blocked' THEN
            IF NEW.LockReason = 'auction' THEN
                IF NEW.AuctionID IS NULL THEN
                    SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'blocked(auction): require AuctionID';
                END IF;
                SET NEW.BookingID = NULL,
                    NEW.HoldExpiresAt = NULL;

            ELSEIF NEW.LockReason IN ('manual','external_sync') THEN
                SET NEW.BookingID = NULL,
                    NEW.AuctionID = NULL,
                    NEW.HoldExpiresAt = NULL;

            ELSE
                SIGNAL SQLSTATE '45000'
                    SET MESSAGE_TEXT = 'blocked: LockReason must be auction/manual/external_sync';
            END IF;

        ELSE
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Unknown Status';
        END IF;
        END
    `;

    try {
        await pool.query(`
            CREATE TRIGGER \`${dbname}\`.\`bi_Calendar_validate\`
            BEFORE INSERT ON \`${dbname}\`.\`Calendar\`
            FOR EACH ROW
            ${validateBody}
        `);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.query(`
            CREATE TRIGGER \`${dbname}\`.\`bu_Calendar_validate\`
            BEFORE UPDATE ON \`${dbname}\`.\`Calendar\`
            FOR EACH ROW
            ${validateBody}
        `);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
    
    const refcheckBody = `
    BEGIN
        DECLARE v_exists INT;

        -- Product ph·∫£i t·ªìn t·∫°i
        SELECT 1 INTO v_exists FROM Products WHERE Products.ProductID = NEW.ProductID LIMIT 1;
        IF v_exists IS NULL THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ProductID not found';
        END IF;

        -- BookingID n·∫øu c√≥ ph·∫£i t·ªìn t·∫°i
        IF NEW.BookingID IS NOT NULL THEN
            SET v_exists = NULL;
            SELECT 1 INTO v_exists FROM Booking WHERE Booking.BookingID = NEW.BookingID LIMIT 1;
            IF v_exists IS NULL THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'BookingID not found';
            END IF;
        END IF;

        -- AuctionID n·∫øu c√≥ ph·∫£i t·ªìn t·∫°i
        IF NEW.AuctionID IS NOT NULL THEN
            SET v_exists = NULL;
            SELECT 1 INTO v_exists FROM Auction WHERE Auction.AuctionID = NEW.AuctionID LIMIT 1;
            IF v_exists IS NULL THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'AuctionID not found';
            END IF;
        END IF;
    END`;

    try {
        await pool.query(`
            CREATE TRIGGER \`${dbname}\`.\`bi_Calendar_refcheck\`
            BEFORE INSERT ON \`${dbname}\`.\`Calendar\`
            FOR EACH ROW
            ${refcheckBody}
        `);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.query(`
            CREATE TRIGGER \`${dbname}\`.\`bu_Calendar_refcheck\`
            BEFORE UPDATE ON \`${dbname}\`.\`Calendar\`
            FOR EACH ROW
            ${refcheckBody}
        `);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Calendar_BookingID ON Calendar(BookingID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Calendar_AuctionID ON Calendar(AuctionID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Calendar_Day ON Calendar(Day)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Calendar_StatusDayProductID ON Calendar(Status, Day, ProductID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    const [pinfo] = await pool.query(`
        SELECT 
        SUM(CASE WHEN PARTITION_NAME IS NOT NULL THEN 1 ELSE 0 END) AS part_count,
        SUM(CASE WHEN PARTITION_NAME = 'pmax' THEN 1 ELSE 0 END)    AS has_pmax
        FROM information_schema.PARTITIONS
        WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'Calendar';
    `, [dbname]);

    const partCount = Number(pinfo?.[0]?.part_count || 0);
    const hasPmax   = Number(pinfo?.[0]?.has_pmax   || 0);

    if (partCount === 0) {
        // B·∫£ng ch∆∞a partition -> th√™m scheme v·ªõi pmax
        await pool.query(`
        ALTER TABLE \`${dbname}\`.\`Calendar\`
        PARTITION BY RANGE COLUMNS(Day) (
            PARTITION pmax VALUES LESS THAN (MAXVALUE)
        );
        `);
    } else if (hasPmax === 0) {
        // ƒê√£ partition nh∆∞ng thi·∫øu pmax -> b·ªï sung pmax
        await pool.query(`
        ALTER TABLE \`${dbname}\`.\`Calendar\`
        ADD PARTITION (
            PARTITION pmax VALUES LESS THAN (MAXVALUE)
        );
        `);
    }
}

async function createPaymentsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Payments (
            PaymentID BIGINT AUTO_INCREMENT PRIMARY KEY,
            BookingID INT UNSIGNED NOT NULL,
            UserID INT NOT NULL,
            Amount DECIMAL(10,2) NOT NULL,
            Currency VARCHAR(10) NOT NULL DEFAULT 'VND',
            Provider VARCHAR(50) NOT NULL,
            ProviderTxnID VARCHAR(128) NULL,
            Status ENUM('initiated','authorized','captured','failed','refunded','voided') NOT NULL DEFAULT 'initiated',
            FailureReason VARCHAR(255) NULL,
            CreatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            UpdatedAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (BookingID) REFERENCES Booking(BookingID),
            FOREIGN KEY (UserID) REFERENCES Users(UserID),
            UNIQUE KEY uq_provider_txn (Provider, ProviderTxnID)
        );
    `);

    try {
        await pool.execute(`CREATE INDEX idx_Payments_BookingID ON Payments(BookingID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Payments_UserID ON Payments(UserID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Payments_Status ON Payments(Status)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }

    try {
        await pool.execute(`CREATE INDEX idx_Payments_CreatedAt ON Payments(CreatedAt)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createUserViolationsTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS UserViolations (
            ViolationID BIGINT AUTO_INCREMENT PRIMARY KEY,
            UserID INT NOT NULL,
            BookingID INT UNSIGNED NULL,
            Kind ENUM('non_payment') NOT NULL,
            Note VARCHAR(255) NULL,
            CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            UNIQUE KEY uniq_user_booking_kind (UserID, BookingID, Kind),
            INDEX idx_user_kind (UserID, Kind),
            FOREIGN KEY (UserID) REFERENCES Users(UserID),
            FOREIGN KEY (BookingID) REFERENCES Booking(BookingID) ON DELETE SET NULL
        );
    `);

    try {
        await pool.execute(`CREATE INDEX idx_UserViolations_BookingID ON UserViolations(BookingID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

async function createEmailOutboxTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS EmailOutbox (
            EmailID BIGINT AUTO_INCREMENT PRIMARY KEY,
            ToEmail VARCHAR(255) NOT NULL,
            Subject VARCHAR(255) NOT NULL,
            Body TEXT NOT NULL,
            SendAfter DATETIME DEFAULT CURRENT_TIMESTAMP,
            Meta JSON NULL,
            ProcessedAt DATETIME NULL,
            CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_unprocessed (ProcessedAt)
        );
    `);
}

async function createRatingTable() {
    await pool.execute(`
        CREATE TABLE IF NOT EXISTS Rating (
            RatingID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            UserID INT NOT NULL,
            BookingID INT UNSIGNED,
            ProductID INT,
            CleanlinessPoint FLOAT,
            LocationPoint FLOAT,
            ServicePoint FLOAT,
            ValuePoint FLOAT,
            CommunicationPoint FLOAT,
            ConveniencePoint FLOAT,
            Comment TEXT,
            CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            UNIQUE KEY uq_rating_booking_user (BookingID, UserID),
            FOREIGN KEY (UserID) REFERENCES Users(UserID),
            FOREIGN KEY (BookingID) REFERENCES Booking(BookingID),
            FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
        )
    `);
    
    try {
        await pool.execute(`CREATE INDEX idx_Rating_ProductID ON Rating(ProductID)`);
    } catch (error) {
        if (error.code !== 'ER_DUP_KEYNAME') throw error;
    }
}

// Trigger
async function dropUpdateRoomTypesTriggerIfExists() {
    await pool.query(`
        DROP TRIGGER IF EXISTS before_insert_products;
    `);
}

async function createUpdateRoomTypesTrigger() {
    await pool.query(`
        CREATE TRIGGER before_insert_products
        BEFORE INSERT ON Products
        FOR EACH ROW
        BEGIN
            DECLARE new_type INT DEFAULT 2; -- m·∫∑c ƒë·ªãnh CƒÉn h·ªô
            DECLARE pname VARCHAR(255);

            -- chu·∫©n h√≥a t√™n (lowercase)
            SET pname = LOWER(NEW.Name);

            -- check c√°c keyword
            IF pname LIKE '%resort%' THEN
                SET new_type = 4; -- Resort
            ELSEIF pname LIKE '%studio%' THEN
                SET new_type = 6; -- Studio
            ELSEIF pname LIKE '%kh√°ch s·∫°n%' OR pname LIKE '%khach san%' OR pname LIKE '%hotel%' THEN
                SET new_type = 1; -- Kh√°ch s·∫°n
            ELSEIF pname LIKE '%bi·ªát th·ª±%' OR pname LIKE '%biet thu%' OR pname LIKE '%villa%' THEN
                SET new_type = 5; -- Bi·ªát th·ª±
            ELSEIF pname LIKE '%cƒÉn h·ªô%' OR pname LIKE '%can ho%' OR pname LIKE '%apartment%' THEN
                SET new_type = 2; -- CƒÉn h·ªô
            ELSEIF pname LIKE '%nh√† ngh·ªâ%' OR pname LIKE '%nha nghi%' OR pname LIKE '%motel%' THEN
                SET new_type = 7; -- Nh√† ngh·ªâ
            ELSEIF pname LIKE '%nh√†%' OR pname LIKE '%nha%' OR pname LIKE '%homestay%' THEN
                SET new_type = 3; -- Homestay
            END IF;

            -- ch·ªâ g√°n RoomType n·∫øu ch∆∞a ƒë∆∞·ª£c set khi insert
            IF NEW.RoomType IS NULL THEN
                SET NEW.RoomType = new_type;
            END IF;
        END;
    `);
}

// Procedure
async function dropUpsertPropertyProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS UpsertProperty;
    `);
}

async function createUpsertPropertyProcedure() {
    await pool.query(`
        CREATE PROCEDURE UpsertProperty(IN p_PropertyName VARCHAR(255))
        BEGIN
            DECLARE v_PropertyID INT;
            DECLARE v_OldName VARCHAR(255);

            SELECT PropertyID, PropertyName INTO v_PropertyID, v_OldName
            FROM Properties
            WHERE PropertyName = p_PropertyName
            LIMIT 1;

            IF v_PropertyID IS NULL THEN
                INSERT INTO Properties(PropertyName, PropertyImageURL)
                VALUES(p_PropertyName, NULL);
            ELSE
                IF v_OldName <> p_PropertyName THEN
                    UPDATE Properties
                    SET PropertyName = p_PropertyName
                    WHERE PropertyID = v_PropertyID;
                END IF;
            END IF;
        END;
    `);
}

async function dropUpsertRoomTypeProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS UpsertRoomType;
    `);
}

async function createUpsertRoomTypeProcedure() {
    await pool.query(`
        CREATE PROCEDURE UpsertRoomType(IN p_RoomTypeName VARCHAR(255))
        BEGIN
            DECLARE v_RoomTypeID INT;
            DECLARE v_OldName VARCHAR(255);

            SELECT RoomTypeID, RoomTypeName INTO v_RoomTypeID, v_OldName
            FROM RoomTypes
            WHERE RoomTypeName = p_RoomTypeName
            LIMIT 1;

            IF v_RoomTypeID IS NULL THEN
                INSERT INTO RoomTypes(RoomTypeName, RoomTypeImageURL)
                VALUES(p_RoomTypeName, NULL);
            ELSE
                IF v_OldName <> p_RoomTypeName THEN
                    UPDATE RoomTypes
                    SET RoomTypeName = p_RoomTypeName
                    WHERE RoomTypeID = v_RoomTypeID;
                END IF;
            END IF;
        END;
    `);
}

async function dropUpsertProductProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS UpsertProduct;
    `);
}

async function createUpsertProductProcedure() {
    await pool.query(`
        CREATE PROCEDURE UpsertProduct(
            IN p_UID BIGINT UNSIGNED,
            IN p_ExternalID VARCHAR(30),
            IN p_Source VARCHAR(20),
            IN p_Name VARCHAR(255),
            IN p_Address VARCHAR(255),
            IN p_ProvinceCode VARCHAR(20),
            IN p_DistrictCode VARCHAR(20),
            IN p_Latitude FLOAT,
            IN p_Longitude FLOAT,
            IN p_PropertyType INT,
            IN p_RoomType INT,
            IN p_MaxGuests SMALLINT,
            IN p_NumBedrooms SMALLINT,
            IN p_NumBeds SMALLINT,
            IN p_NumBathrooms SMALLINT,
            IN p_Price DECIMAL(10,2),
            IN p_Currency VARCHAR(20),
            IN p_Cleanliness FLOAT,
            IN p_Location FLOAT,
            IN p_Service FLOAT,
            IN p_Value FLOAT,
            IN p_Communication FLOAT,
            IN p_Convenience FLOAT,
            IN p_CreatedAt TIMESTAMP,
            IN p_LastSyncedAt TIMESTAMP
        )
        BEGIN
            DECLARE v_ProductID INT;

            SELECT ProductID INTO v_ProductID
            FROM Products
            WHERE ExternalID = p_ExternalID
            LIMIT 1;

            IF v_ProductID IS NULL THEN
                -- Insert n·∫øu ch∆∞a c√≥
                INSERT INTO Products(UID, Source, ExternalID, Name, Address, ProvinceCode, DistrictCode, Latitude, Longitude,
                                    PropertyType, RoomType, MaxGuests, NumBedrooms, NumBeds, NumBathrooms, Price, Currency,
                                    CleanlinessPoint, LocationPoint, ServicePoint, ValuePoint, CommunicationPoint, ConveniencePoint,
                                    CreatedAt, LastSyncedAt)
                VALUES(p_UID, p_Source, p_ExternalID, p_Name, p_Address, p_ProvinceCode, p_DistrictCode, p_Latitude, p_Longitude,
                    p_PropertyType, p_RoomType, p_MaxGuests, p_NumBedrooms, p_NumBeds, p_NumBathrooms, p_Price, p_Currency,
                    p_Cleanliness, p_Location, p_Service, p_Value, p_Communication, p_Convenience,
                    p_CreatedAt, p_LastSyncedAt);
            ELSE
                -- Ch·ªâ update n·∫øu c√≥ s·ª± kh√°c bi·ªát
                IF EXISTS (
                    SELECT 1 FROM Products
                    WHERE ProductID = v_ProductID
                    AND (
                        Source <> p_Source OR
                        Name <> p_Name OR
                        Address <> p_Address OR
                        ProvinceCode <> p_ProvinceCode OR
                        DistrictCode <> p_DistrictCode OR
                        Latitude <> p_Latitude OR
                        Longitude <> p_Longitude OR
                        PropertyType <> p_PropertyType OR
                        RoomType <> p_RoomType OR
                        MaxGuests <> p_MaxGuests OR
                        NumBedrooms <> p_NumBedrooms OR
                        NumBeds <> p_NumBeds OR
                        NumBathrooms <> p_NumBathrooms OR
                        Price <> p_Price OR
                        Currency <> p_Currency OR
                        CleanlinessPoint <> p_Cleanliness OR
                        LocationPoint <> p_Location OR
                        ServicePoint <> p_Service OR
                        ValuePoint <> p_Value OR
                        CommunicationPoint <> p_Communication OR
                        ConveniencePoint <> p_Convenience
                    )
                ) THEN
                    UPDATE Products
                    SET 
                        Source = p_Source,
                        Name = p_Name,
                        Address = p_Address,
                        ProvinceCode = p_ProvinceCode,
                        DistrictCode = p_DistrictCode,
                        Latitude = p_Latitude,
                        Longitude = p_Longitude,
                        PropertyType = p_PropertyType,
                        RoomType = p_RoomType,
                        MaxGuests = p_MaxGuests,
                        NumBedrooms = p_NumBedrooms,
                        NumBeds = p_NumBeds,
                        NumBathrooms = p_NumBathrooms,
                        Price = CASE WHEN p_Price > 0 THEN p_Price ELSE Price END,
                        Currency = p_Currency,
                        CleanlinessPoint = p_Cleanliness,
                        LocationPoint = p_Location,
                        ServicePoint = p_Service,
                        ValuePoint = p_Value,
                        CommunicationPoint = p_Communication,
                        ConveniencePoint = p_Convenience,
                        CreatedAt = p_CreatedAt,
                        LastSyncedAt = p_LastSyncedAt
                    WHERE ProductID = v_ProductID;
                ELSE
                    -- Ch·ªâ c·∫≠p nh·∫≠t th·ªùi gian ƒë·ªìng b·ªô n·∫øu kh√¥ng thay ƒë·ªïi g√¨ kh√°c
                    UPDATE Products
                    SET LastSyncedAt = p_LastSyncedAt
                    WHERE ProductID = v_ProductID;
                END IF;
            END IF;
        END;
    `);
}

async function dropAddToFavoritesProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS AddToFavorites;
    `);
}

async function dropRemoveFromFavoritesProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS RemoveFromFavorites;
    `);
}

async function createAddToFavoritesProcedure() {
    await pool.query(`
        CREATE PROCEDURE AddToFavorites(
            IN p_UserID INT,
            IN p_ProductID INT
        )
        BEGIN
            DECLARE v_Count INT DEFAULT 0;
            DECLARE v_UserExists INT DEFAULT 0;
            DECLARE v_ProductExists INT DEFAULT 0;
            
            SELECT COUNT(*) INTO v_UserExists 
            FROM Users 
            WHERE UserID = p_UserID;
            
            SELECT COUNT(*) INTO v_ProductExists 
            FROM Products 
            WHERE ProductID = p_ProductID;
            
            IF v_UserExists = 0 THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'User not found';
            END IF;
            
            IF v_ProductExists = 0 THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Product not found';
            END IF;
            
            SELECT COUNT(*) INTO v_Count
            FROM Favorites
            WHERE UserID = p_UserID AND ProductID = p_ProductID;
            
            IF v_Count = 0 THEN
                INSERT INTO Favorites(UserID, ProductID, CreatedAt)
                VALUES(p_UserID, p_ProductID, NOW());
                
                SELECT 'SUCCESS' AS Status, 'Product added to favorites' AS Message;
            ELSE
                SELECT 'INFO' AS Status, 'Product already in favorites' AS Message;
            END IF;
        END;
    `);
}

async function createRemoveFromFavoritesProcedure() {
    await pool.query(`
        CREATE PROCEDURE RemoveFromFavorites(
            IN p_UserID INT,
            IN p_ProductID INT
        )
        BEGIN
            DECLARE v_Count INT DEFAULT 0;
            
            SELECT COUNT(*) INTO v_Count
            FROM Favorites
            WHERE UserID = p_UserID AND ProductID = p_ProductID;
            
            IF v_Count > 0 THEN
                DELETE FROM Favorites
                WHERE UserID = p_UserID AND ProductID = p_ProductID;
                
                SELECT 'SUCCESS' AS Status, 'Product removed from favorites' AS Message;
            ELSE
                SELECT 'INFO' AS Status, 'Product not found in favorites' AS Message;
            END IF;
        END;
    `);
}

async function dropGetUserFavoritesProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS GetUserFavorites;
    `);
}

async function createGetUserFavoritesProcedure() {
    await pool.query(`
        CREATE PROCEDURE GetUserFavorites(
            IN p_UserID INT,
            IN p_Limit INT,
            IN p_Offset INT
        )
        BEGIN
            SELECT 
                f.FavoriteID,
                f.UserID,
                f.ProductID,
                f.CreatedAt,
                p.UID,
                p.Name AS ProductName,
                p.Address,
                p.Price,
                p.Currency,
                prop.PropertyName,
                rt.RoomTypeName,
                prov.Name AS ProvinceName,
                ROUND((
                    COALESCE(p.CleanlinessPoint, 0) + 
                    COALESCE(p.LocationPoint, 0) + 
                    COALESCE(p.ServicePoint, 0) + 
                    COALESCE(p.ValuePoint, 0) + 
                    COALESCE(p.CommunicationPoint, 0) + 
                    COALESCE(p.ConveniencePoint, 0)
                ) / 6, 2) AS AverageRating
            FROM Favorites f
            JOIN Products p ON f.ProductID = p.ProductID
            LEFT JOIN Properties prop ON p.PropertyType = prop.PropertyID
            LEFT JOIN RoomTypes rt ON p.RoomType = rt.RoomTypeID
            LEFT JOIN Provinces prov ON p.ProvinceCode = prov.ProvinceCode
            WHERE f.UserID = p_UserID
            ORDER BY f.CreatedAt DESC
            LIMIT p_Limit OFFSET p_Offset;
        END;
    `);
}

async function dropUpsertAmenityGroupProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS UpsertAmenityGroup;
    `);
}

async function createUpsertAmenityGroupProcedure() {
    await pool.query(`
        CREATE PROCEDURE UpsertAmenityGroup(IN p_GroupName VARCHAR(255))
        BEGIN
            DECLARE v_GroupID INT;
            DECLARE v_OldName VARCHAR(255);

            SELECT AmenityGroupID, AmenityGroupName INTO v_GroupID, v_OldName
            FROM AmenityGroups
            WHERE AmenityGroupName = p_GroupName
            LIMIT 1;

            IF v_GroupID IS NULL THEN
                INSERT INTO AmenityGroups(AmenityGroupName)
                VALUES(p_GroupName);
            ELSE
                IF v_OldName <> p_GroupName THEN
                    UPDATE AmenityGroups
                    SET AmenityGroupName = p_GroupName
                    WHERE AmenityGroupID = v_GroupID;
                END IF;
            END IF;
        END;
    `);
}

async function dropUpsertAmenityProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS UpsertAmenity;
    `);
}

async function createUpsertAmenityProcedure() {
    await pool.query(`
        CREATE PROCEDURE UpsertAmenity(IN p_AmenityName VARCHAR(255), IN p_GroupID INT)
        BEGIN
            DECLARE v_AmenityID INT;
            DECLARE v_OldName VARCHAR(255);
            DECLARE v_OldGroupID INT;

            SELECT AmenityID, AmenityName, AmenityGroupID INTO v_AmenityID, v_OldName, v_OldGroupID
            FROM Amenities
            WHERE AmenityName = p_AmenityName
            LIMIT 1;

            IF v_AmenityID IS NULL THEN
                INSERT INTO Amenities(AmenityName, AmenityGroupID, AmenityImageURL)
                VALUES(p_AmenityName, p_GroupID, NULL);
            ELSE
                IF v_OldName <> p_AmenityName OR v_OldGroupID <> p_GroupID THEN
                    UPDATE Amenities
                    SET AmenityName = p_AmenityName,
                        AmenityGroupID = p_GroupID
                    WHERE AmenityID = v_AmenityID;
                END IF;
            END IF;
        END;
    `);
}

async function dropUpsertProductAmenityProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS UpsertProductAmenity;
    `);
}

async function createUpsertProductAmenityProcedure() {
    await pool.query(`
        CREATE PROCEDURE UpsertProductAmenity(IN p_ProductID INT, IN p_AmenityID INT)
        BEGIN
            DECLARE v_Count INT;

            SELECT COUNT(*) INTO v_Count
            FROM ProductAmenities
            WHERE ProductID = p_ProductID AND AmenityID = p_AmenityID;

            IF v_Count = 0 THEN
                INSERT INTO ProductAmenities(ProductID, AmenityID)
                VALUES(p_ProductID, p_AmenityID);
            END IF;
            -- Kh√¥ng c√≥ g√¨ ƒë·ªÉ update n√™n kh√¥ng c·∫ßn ph·∫ßn ELSE
        END;
    `);
}

async function dropUpsertRatingProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS UpsertRating;
    `);
}

async function createUpsertRatingProcedure() {
    await pool.query(`
        CREATE PROCEDURE UpsertRating(
            IN p_ExternalID VARCHAR(30),
            IN p_BookingID INT,
            IN p_ProductID INT,
            IN p_Cleanliness FLOAT,
            IN p_Location FLOAT,
            IN p_Service FLOAT,
            IN p_Value FLOAT,
            IN p_Communication FLOAT,
            IN p_Convenience FLOAT
        )
        BEGIN
            DECLARE v_RatingID INT;
            
            SELECT RatingID INTO v_RatingID
            FROM Rating
            WHERE ExternalID = p_ExternalID
            LIMIT 1;
            
            IF v_RatingID IS NULL THEN
                INSERT INTO Rating(ExternalID, BookingID, ProductID, CleanlinessPoint, LocationPoint,
                                ServicePoint, ValuePoint, CommunicationPoint, ConveniencePoint)
                VALUES(p_ExternalID, p_BookingID, p_ProductID, p_Cleanliness, p_Location,
                    p_Service, p_Value, p_Communication, p_Convenience);
            ELSE
                UPDATE Rating
                SET BookingID = p_BookingID,
                    ProductID = p_ProductID,
                    CleanlinessPoint = p_Cleanliness,
                    LocationPoint = p_Location,
                    ServicePoint = p_Service,
                    ValuePoint = p_Value,
                    CommunicationPoint = p_Communication,
                    ConveniencePoint = p_Convenience
                WHERE RatingID = v_RatingID;
            END IF;
        END;
    `);
}

async function dropGetTopProductsByProvinceProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS GetTopProductsByProvince;
    `);
}

async function createGetTopProductsByProvinceProcedure() {
    await pool.query(`
        CREATE PROCEDURE GetTopProductsByProvince(
            IN province_code_input VARCHAR(20),
            IN limit_input INT
        )
        BEGIN
            SELECT 
                p.ProductID,
                p.UID,
                p.ExternalID,
                p.Name,
                p.Address,
                prov.Name AS ProvinceName,
                disct.Name AS DistrictName,
                p.ProvinceCode,
                p.DistrictCode,
                prop.PropertyName,
                p.Price,
                p.Currency,
                p.CleanlinessPoint,
                p.LocationPoint,
                p.ServicePoint,
                p.ValuePoint,
                p.CommunicationPoint,
                p.ConveniencePoint,
                ROUND((
                    COALESCE(p.CleanlinessPoint, 0) + 
                    COALESCE(p.LocationPoint, 0) + 
                    COALESCE(p.ServicePoint, 0) + 
                    COALESCE(p.ValuePoint, 0) + 
                    COALESCE(p.CommunicationPoint, 0) + 
                    COALESCE(p.ConveniencePoint, 0)
                ) / 6, 2) AS AverageRating,
                prop.PropertyName,
                prop.PropertyImageURL,
                rt.RoomTypeName,
                rt.RoomTypeImageURL
            FROM Products p
            LEFT JOIN Properties prop ON p.PropertyType = prop.PropertyID
            LEFT JOIN RoomTypes rt ON p.RoomType = rt.RoomTypeID
            LEFT JOIN Provinces prov ON p.ProvinceCode = prov.ProvinceCode
            LEFT JOIN Districts disct ON p.DistrictCode = disct.DistrictCode
            WHERE p.ProvinceCode = province_code_input
                AND p.CleanlinessPoint IS NOT NULL
                AND p.LocationPoint IS NOT NULL  
                AND p.ServicePoint IS NOT NULL
                AND p.ValuePoint IS NOT NULL
                AND p.CommunicationPoint IS NOT NULL
                AND p.ConveniencePoint IS NOT NULL
            ORDER BY AverageRating DESC
            LIMIT limit_input;
        END;
    `);
}

async function dropGetTopProductsByDistrictProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS GetTopProductsByDistrict;
    `);
}

async function createGetTopProductsByDistrictProcedure() {
    await pool.query(`
        CREATE PROCEDURE GetTopProductsByDistrict(
            IN district_code_input VARCHAR(20),
            IN limit_input INT
        )
        BEGIN
            SELECT 
                p.ProductID,
                p.UID,
                p.ExternalID,
                p.Name,
                p.Address,
                prov.Name AS ProvinceName,
                disct.Name AS DistrictName,
                p.ProvinceCode,
                p.DistrictCode,
                prop.PropertyName,
                p.Price,
                p.Currency,
                p.CleanlinessPoint,
                p.LocationPoint,
                p.ServicePoint,
                p.ValuePoint,
                p.CommunicationPoint,
                p.ConveniencePoint,
                ROUND((
                    COALESCE(p.CleanlinessPoint, 0) + 
                    COALESCE(p.LocationPoint, 0) + 
                    COALESCE(p.ServicePoint, 0) + 
                    COALESCE(p.ValuePoint, 0) + 
                    COALESCE(p.CommunicationPoint, 0) + 
                    COALESCE(p.ConveniencePoint, 0)
                ) / 6, 2) AS AverageRating,
                prop.PropertyName,
                prop.PropertyImageURL,
                rt.RoomTypeName,
                rt.RoomTypeImageURL
            FROM Products p
            LEFT JOIN Properties prop ON p.PropertyType = prop.PropertyID
            LEFT JOIN RoomTypes rt ON p.RoomType = rt.RoomTypeID
            LEFT JOIN Provinces prov ON p.ProvinceCode = prov.ProvinceCode
            LEFT JOIN Districts disct ON p.DistrictCode = disct.DistrictCode
            WHERE p.DistrictCode = district_code_input
                AND p.CleanlinessPoint IS NOT NULL
                AND p.LocationPoint IS NOT NULL  
                AND p.ServicePoint IS NOT NULL
                AND p.ValuePoint IS NOT NULL
                AND p.CommunicationPoint IS NOT NULL
                AND p.ConveniencePoint IS NOT NULL
            ORDER BY AverageRating DESC
            LIMIT limit_input;
        END;
    `);
}

async function dropGetPopularProvincesProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS GetPopularProvinces;
    `);
}

async function createGetPopularProvincesProcedure() {
    await pool.query(`
        CREATE PROCEDURE GetPopularProvinces(IN p_limit INT)
        BEGIN
            SELECT 
                prov.ProvinceCode AS code,
                prov.Name,
                prov.NameEn,
                prov.FullName,
                prov.CodeName,
                COUNT(p.ProductID) AS ProductCount,
                'province' AS type
            FROM Provinces prov
            LEFT JOIN Products p 
                ON prov.ProvinceCode = p.ProvinceCode
            GROUP BY 
                prov.ProvinceCode, 
                prov.Name, 
                prov.NameEn, 
                prov.FullName, 
                prov.FullNameEn, 
                prov.CodeName
            HAVING ProductCount > 0
            ORDER BY 
                ProductCount DESC, 
                prov.Name ASC
            LIMIT p_limit;
        END;
    `);
}

async function dropGetPopularDistrictsProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS GetPopularDistricts;
    `);
}

async function createGetPopularDistrictsProcedure() {
    await pool.query(`
        CREATE PROCEDURE GetPopularDistricts(IN p_limit INT)
        BEGIN
            SELECT 
                disct.DistrictCode AS code,
                disct.Name,
                disct.NameEn,
                disct.FullName,
                disct.CodeName,
                COUNT(p.ProductID) AS ProductCount,
                'district' AS type
            FROM Districts disct
            LEFT JOIN Products p 
                ON disct.DistrictCode = p.DistrictCode
            GROUP BY 
                disct.DistrictCode, 
                disct.Name, 
                disct.NameEn, 
                disct.FullName,
                disct.CodeName
            HAVING ProductCount > 0
            ORDER BY 
                ProductCount DESC, 
                disct.Name ASC
            LIMIT p_limit;
        END;
    `);
}

async function dropSearchProvincesProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS SearchProvinces;
    `);
}

async function createSearchProvincesProcedure() {
    await pool.query(`
        CREATE PROCEDURE SearchProvinces(
            IN p_name VARCHAR(255),
            IN p_limit INT
        )
        BEGIN
            SELECT 
                ProvinceCode AS code,
                Name,
                NameEn,
                FullName,
                FullNameEn,
                CodeName,
                'province' AS type
            FROM Provinces
            WHERE 
                Name = p_name OR 
                NameEn = p_name OR 
                FullName = p_name OR 
                FullNameEn = p_name OR 
                CodeName = p_name
            ORDER BY 
                CASE 
                    WHEN Name = p_name THEN 1
                    WHEN FullName = p_name THEN 2
                    ELSE 3
                END,
                Name ASC
            LIMIT p_limit;
        END;
    `);
}

async function dropSearchDistrictsProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS SearchDistricts;
    `);
}

async function createSearchDistrictsProcedure() {
    await pool.query(`
        CREATE PROCEDURE SearchDistricts(
            IN p_name VARCHAR(255),
            IN p_limit INT
        )
        BEGIN
            SELECT 
                d.DistrictCode AS code,
                d.Name,
                d.NameEn,
                d.FullName,
                d.FullNameEn,
                d.CodeName,
                d.ProvinceCode,
                p.Name AS ProvinceName,
                p.NameEn AS ProvinceNameEn,
                'district' AS type
            FROM Districts d
            LEFT JOIN Provinces p 
                ON d.ProvinceCode = p.ProvinceCode
            WHERE 
                d.Name = p_name OR 
                d.NameEn = p_name OR 
                d.FullName = p_name OR 
                d.FullNameEn = p_name OR 
                d.CodeName = p_name
            ORDER BY 
                CASE 
                    WHEN d.Name = p_name THEN 1 
                    WHEN d.FullName = p_name THEN 2 
                    ELSE 3 
                END,
                d.Name ASC
            LIMIT p_limit;
        END;
    `);
}

async function dropSearchProductIDFromUIDProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS SearchProductIDFromUID;
    `);
}

async function createSearchProductIDFromUIDProcedure() {
    await pool.query(`
        CREATE PROCEDURE SearchProductIDFromUID(
            IN p_uid BIGINT UNSIGNED
        )
        BEGIN
            SELECT ProductID FROM Products WHERE UID = p_uid;
        END;
    `);
}

async function dropGetAllProvincesProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS GetAllProvinces;
    `);
}

async function createGetAllProvincesProcedure() {
    await pool.query(`
        CREATE PROCEDURE GetAllProvinces()
        BEGIN
            SELECT 
                ProvinceCode AS code,
                Name,
                NameEn,
                FullName,
                'province' AS type
            FROM Provinces;
        END;
    `);
}

async function dropGetAllDistrictsProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS GetAllDistricts;
    `);
}

async function createGetAllDistrictsProcedure() {
    await pool.query(`
        CREATE PROCEDURE GetAllDistricts()
        BEGIN
            SELECT 
                DistrictCode AS code,
                Name,
                NameEn,
                FullName,
                'district' AS type,
                ProvinceCode AS provinceCode
            FROM Districts;
        END;
    `);
}

async function dropRotateMonthPartitionsProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS RotateMonthPartitions;
    `);
}

async function createRotateMonthPartitionsProcedure(pool) {
    await pool.query(`
        CREATE PROCEDURE RotateMonthPartitions(
        IN in_schema VARCHAR(64),
        IN in_table  VARCHAR(64),
        IN keep_months INT
        )
        proc: BEGIN
            DECLARE v_schema VARCHAR(64);
            DECLARE v_table  VARCHAR(64);

            DECLARE v_today DATE;
            DECLARE v_month0 DATE;        -- ng√†y 1 c·ªßa th√°ng hi·ªán t·∫°i
            DECLARE v_is_first_day BOOLEAN;

            DECLARE v_has_pmax INT DEFAULT 0;

            DECLARE i INT DEFAULT 0;
            DECLARE v_part_name VARCHAR(16);
            DECLARE v_part_boundary DATE;

            DECLARE v_sql TEXT;

            -- Cursor x√≥a partition c≈© (boundary < v_month0)
            DECLARE c_name VARCHAR(64);
            DECLARE done INT DEFAULT 0;
            DECLARE cur_old CURSOR FOR
                SELECT PARTITION_NAME
                FROM information_schema.PARTITIONS
                WHERE TABLE_SCHEMA = v_schema
                AND TABLE_NAME   = v_table
                AND PARTITION_NAME IS NOT NULL
                AND PARTITION_NAME <> 'pmax'
                AND PARTITION_DESCRIPTION REGEXP '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'
                AND PARTITION_DESCRIPTION < DATE_FORMAT(v_month0, '%Y-%m-%d');
            DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

            -- Chu·∫©n h√≥a input
            SET v_schema = NULLIF(TRIM(in_schema), '');
            IF v_schema IS NULL THEN SET v_schema = DATABASE(); END IF;

            SET v_table = TRIM(in_table);
            IF v_table IS NULL OR v_table = '' THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Table name is required';
            END IF;

            IF keep_months IS NULL OR keep_months < 1 THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'keep_months must be >= 1';
            END IF;

            -- Ch·ªâ ch·∫°y ƒë·∫ßu th√°ng
            SET v_today = CURRENT_DATE();
            SET v_month0 = DATE_SUB(v_today, INTERVAL DAY(v_today) - 1 DAY);
            SET v_is_first_day = (v_today = v_month0);
            /*IF NOT v_is_first_day THEN
                LEAVE proc;
            END IF;*/

            -- Ph·∫£i c√≥ pmax
            SELECT COUNT(*) INTO v_has_pmax
            FROM information_schema.PARTITIONS
            WHERE TABLE_SCHEMA = v_schema
            AND TABLE_NAME   = v_table
            AND PARTITION_NAME = 'pmax';
            IF v_has_pmax = 0 THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Missing partition pmax (MAXVALUE).';
            END IF;

            -- (1) X√≥a t·∫•t c·∫£ partition c≈© (boundary < ng√†y ƒë·∫ßu th√°ng hi·ªán t·∫°i)
            OPEN cur_old;
            old_loop: LOOP
                FETCH cur_old INTO c_name;
                IF done = 1 THEN LEAVE old_loop; END IF;

                SET v_sql = CONCAT(
                'ALTER TABLE ', v_schema, '.', v_table, ' DROP PARTITION ', c_name
                );
                SET @sql := v_sql;
                PREPARE stmt FROM @sql;
                EXECUTE stmt;
                DEALLOCATE PREPARE stmt;
            END LOOP;
            CLOSE cur_old;

            -- (2) B·ªï sung ƒë·ªß c√°c partition t·ª´ th√°ng hi·ªán t·∫°i ‚Üí hi·ªán t·∫°i + (keep_months - 1)
            SET i = 0;
            ensure_loop: WHILE i < keep_months DO
                SET v_part_name = CONCAT('p', DATE_FORMAT(DATE_ADD(v_month0, INTERVAL i MONTH), '%Y_%m'));
                SET v_part_boundary = DATE_ADD(DATE_ADD(v_month0, INTERVAL i MONTH), INTERVAL 1 MONTH);

                IF NOT EXISTS (
                SELECT 1
                FROM information_schema.PARTITIONS
                WHERE TABLE_SCHEMA = v_schema
                    AND TABLE_NAME   = v_table
                    AND PARTITION_NAME = v_part_name
                ) THEN
                SET v_sql = CONCAT(
                    'ALTER TABLE ', v_schema, '.', v_table, ' ',
                    'REORGANIZE PARTITION pmax INTO (',
                    'PARTITION ', v_part_name, ' VALUES LESS THAN (''',
                    DATE_FORMAT(v_part_boundary, '%Y-%m-01'), '''), ',
                    'PARTITION pmax VALUES LESS THAN (MAXVALUE)',
                    ')'
                );
                SET @sql := v_sql;
                PREPARE stmt FROM @sql;
                EXECUTE stmt;
                DEALLOCATE PREPARE stmt;
                END IF;

                SET i = i + 1;
            END WHILE;

        END
    `);
}

async function dropAddCalendarForRoomProcedureIfExists() {
    await pool.query(`
        DROP PROCEDURE IF EXISTS AddCalendarForRoom;
    `);
}

async function createAddCalendarForRoomProcedure() {
    await pool.query(`
        CREATE PROCEDURE \`AddCalendarForRoom\`(
        IN in_schema       VARCHAR(64),   -- NULL => DATABASE()
        IN in_product_id   INT,           -- NULL => t·∫•t c·∫£ Products
        IN in_months_ahead INT            -- s·ªë th√°ng (>=1)
        )
        BEGIN
            DECLARE v_months INT;
            DECLARE v_cur DATE;
            DECLARE v_end DATE;
            DECLARE v_total BIGINT DEFAULT 0;

            -- months >= 1
            SET v_months = IFNULL(in_months_ahead, 6);
            IF v_months < 1 THEN
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'in_months_ahead must be >= 1';
            END IF;

            -- [v_cur .. v_end) theo ng√†y
            SET v_cur = DATE_SUB(CURRENT_DATE(), INTERVAL DAY(CURRENT_DATE())-1 DAY);
            SET v_end = DATE_ADD(v_cur, INTERVAL v_months MONTH);

            day_loop: WHILE v_cur < v_end DO
                -- ch·ªâ ch√®n (ProductID, v_cur) ch∆∞a t·ªìn t·∫°i
                INSERT INTO Calendar (ProductID, Day, Status)
                SELECT p.ProductID, v_cur, 'available'
                FROM Products p
                LEFT JOIN Calendar c
                    ON c.ProductID = p.ProductID AND c.Day = v_cur
                WHERE c.ProductID IS NULL
                AND (in_product_id IS NULL OR p.ProductID = in_product_id);

                SET v_total = v_total + ROW_COUNT();

                SET v_cur = DATE_ADD(v_cur, INTERVAL 1 DAY);
            END WHILE;

            -- tr·∫£ v·ªÅ s·ªë d√≤ng ƒë√£ th√™m (optional)
            SELECT v_total AS inserted_rows;
        END
    `);
}

async function dropSpPlaceBookingDraftIfExists() {
    await pool.query(`DROP PROCEDURE IF EXISTS sp_place_booking_draft;`);
}

async function createSpPlaceBookingDraft() {
    await pool.query(`
        CREATE PROCEDURE sp_place_booking_draft (
            IN  p_UserID INT, IN  p_ProductID INT,
            IN  p_Start DATE, IN  p_End DATE,          -- [start, end)
            IN  p_Nights INT, IN  p_UnitPrice DECIMAL(10,2),
            IN  p_Currency VARCHAR(10), IN  p_Provider VARCHAR(50),
            IN  p_HoldMinutes INT,
            OUT p_BookingID INT UNSIGNED, OUT p_PaymentID BIGINT, OUT p_HoldExpiresAt DATETIME
        )
        proc:BEGIN
            DECLARE v_lock_ok INT DEFAULT 0; DECLARE v_now DATETIME;
            DECLARE v_amount DECIMAL(10,2); DECLARE v_conflicts INT DEFAULT 0;

            IF p_End <= p_Start THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='End>Start required'; END IF;
            SET v_now = NOW(); IF p_HoldMinutes IS NULL OR p_HoldMinutes<=0 THEN SET p_HoldMinutes=30; END IF;
            IF p_Nights IS NULL OR p_Nights<=0 THEN SET p_Nights = DATEDIFF(p_End, p_Start); END IF;
            SET v_amount = p_Nights * p_UnitPrice; SET p_HoldExpiresAt = v_now + INTERVAL p_HoldMinutes MINUTE;

            SELECT GET_LOCK(CONCAT('calprod:', p_ProductID), 10) INTO v_lock_ok;
            IF v_lock_ok <> 1 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='Cannot obtain product lock'; END IF;

            START TRANSACTION;

            -- 0) D·ªçn reserved h·∫øt h·∫°n
            UPDATE Calendar
            SET Status='available', LockReason=NULL, BookingID=NULL, AuctionID=NULL, HoldExpiresAt=NULL
            WHERE Status='reserved' AND HoldExpiresAt IS NOT NULL AND HoldExpiresAt < v_now;

            -- 1) Booking pending
            INSERT INTO Booking(UserID, ProductID, StartDate, EndDate, BookingStatus, WinningPrice, CreatedAt, UpdatedAt)
            VALUES(p_UserID, p_ProductID, p_Start, p_End, 'pending', v_amount, v_now, v_now);
            SET p_BookingID = LAST_INSERT_ID();

            -- 2) Ki·ªÉm tra xung ƒë·ªôt
            SELECT COUNT(*) INTO v_conflicts
            FROM Calendar
            WHERE ProductID=p_ProductID AND Day>=p_Start AND Day<p_End
            AND ( Status IN ('booked','blocked')
                OR (Status='reserved' AND (HoldExpiresAt IS NULL OR HoldExpiresAt >= v_now)) );
            IF v_conflicts>0 THEN
                ROLLBACK; DO RELEASE_LOCK(CONCAT('calprod:', p_ProductID));
                SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='Date range not available';
            END IF;

            -- 3a) B∆°m d√≤ng thi·∫øu (CTE ƒë·ª©ng tr∆∞·ªõc INSERT)
            INSERT IGNORE INTO Calendar(ProductID, Day, Status)
            WITH RECURSIVE d AS (
                SELECT p_Start AS Day
                UNION ALL
                SELECT Day + INTERVAL 1 DAY FROM d WHERE Day + INTERVAL 1 DAY < p_End
            )
            SELECT p_ProductID, Day, 'available' FROM d;

            -- 3b) Reserve d·∫£i ng√†y (CTE ƒë·ª©ng tr∆∞·ªõc UPDATE, r·ªìi JOIN tr·ª±c ti·∫øp d2)
            WITH RECURSIVE d2 AS (
                SELECT p_Start AS Day
                UNION ALL
                SELECT Day + INTERVAL 1 DAY FROM d2 WHERE Day + INTERVAL 1 DAY < p_End
            )
            UPDATE Calendar c
            JOIN d2 x ON x.Day = c.Day
            SET c.Status='reserved',
                c.LockReason='booking_hold',
                c.BookingID=p_BookingID,
                c.AuctionID=NULL,
                c.HoldExpiresAt=p_HoldExpiresAt
            WHERE c.ProductID=p_ProductID AND c.Day>=p_Start AND c.Day<p_End;

            -- 4) Payment initiated
            /*INSERT INTO Payments(BookingID, UserID, Amount, Currency, Provider, Status, CreatedAt, UpdatedAt)
            VALUES(p_BookingID, p_UserID, v_amount, p_Currency, p_Provider, 'initiated', v_now, v_now);
            SET p_PaymentID = LAST_INSERT_ID();*/

            COMMIT; DO RELEASE_LOCK(CONCAT('calprod:', p_ProductID));
        END
    `);
}




async function initSchema() {
    try {
        await testConnection();
        console.log('‚úÖ Database connection established successfully!');
        
        console.log('\nüìã Creating tables...');

        await createSystemParametersTable();
        console.log('‚úÖ SystemParameters table ready');

        await createAdministrativeRegionsTable();
        console.log('‚úÖ AdministrativeRegions table ready');
        
        await createAdministrativeUnitsTable();
        console.log('‚úÖ AdministrativeUnits table ready');
        
        await createProvincesTable();
        console.log('‚úÖ Provinces table ready');
        
        await createDistrictsTable();
        console.log('‚úÖ Districts table ready');
        
        await createUsersTable();
        console.log('‚úÖ Users table ready');
        
        await createOAuthAccountsTable();
        console.log('‚úÖ OAuthAccounts table ready');
        
        await createPaymentMethodsTable();
        console.log('‚úÖ PaymentMethods table ready');
        
        await createPropertiesTable();
        console.log('‚úÖ Properties table ready');
        
        await createRoomTypesTable();
        console.log('‚úÖ RoomTypes table ready');
        
        await createProductsTable();
        console.log('‚úÖ Products table ready');

        await createFavoritesTable();
        console.log('‚úÖ Favorites table ready');

        await createWishlistTable();
        console.log('‚úÖ Wishlist table ready');

        await createAmenityGroupsTable();
        console.log('‚úÖ AmenityGroups table ready');
        
        await createAmenitiesTable();
        console.log('‚úÖ Amenities table ready');
        
        await createProductAmenitiesTable();
        console.log('‚úÖ ProductAmenities table ready');
        
        await createAuctionTable();
        console.log('‚úÖ Auction table ready');
        
        await createBidsTable();
        console.log('‚úÖ Bids table ready');
        
        await createBookingTable();
        console.log('‚úÖ Booking table ready');

        await createCalendarTable();
        console.log('‚úÖ Calendar table ready');

        await createPaymentsTable();
        console.log('‚úÖ Payments table ready');

        await createUserViolationsTable();
        console.log('‚úÖ UserViolations table ready');

        await createEmailOutboxTable();
        console.log('‚úÖ EmailOutbox table ready');
        
        await createRatingTable();
        console.log('‚úÖ Rating table ready');

        console.log('\nüìã Creating triggers...');

        await dropUpdateRoomTypesTriggerIfExists();
        await createUpdateRoomTypesTrigger();
        console.log('‚úÖ UpdateRoomTypes trigger ready');

        console.log('\nüìã Creating procedures...');

        await dropUpsertPropertyProcedureIfExists();
        await createUpsertPropertyProcedure();
        console.log('‚úÖ UpsertProperty procedure ready');

        await dropUpsertRoomTypeProcedureIfExists();
        await createUpsertRoomTypeProcedure();
        console.log('‚úÖ UpsertRoomType procedure ready');

        await dropUpsertProductProcedureIfExists();
        await createUpsertProductProcedure();
        console.log('‚úÖ UpsertProduct procedure ready');

        await dropAddToFavoritesProcedureIfExists();
        await createAddToFavoritesProcedure();
        console.log('‚úÖ AddToFavorites procedure ready');

        await dropRemoveFromFavoritesProcedureIfExists();
        await createRemoveFromFavoritesProcedure();
        console.log('‚úÖ RemoveFromFavorites procedure ready');

        await dropGetUserFavoritesProcedureIfExists();
        await createGetUserFavoritesProcedure();
        console.log('‚úÖ GetUserFavorites procedure ready');

        await dropUpsertAmenityGroupProcedureIfExists();
        await createUpsertAmenityGroupProcedure();
        console.log('‚úÖ UpsertAmenityGroup procedure ready');

        await dropUpsertAmenityProcedureIfExists();
        await createUpsertAmenityProcedure();
        console.log('‚úÖ UpsertAmenity procedure ready');

        await dropUpsertProductAmenityProcedureIfExists();
        await createUpsertProductAmenityProcedure();
        console.log('‚úÖ UpsertProductAmenity procedure ready');

        await dropUpsertRatingProcedureIfExists();
        await createUpsertRatingProcedure();
        console.log('‚úÖ UpsertRating procedure ready');

        await dropGetTopProductsByProvinceProcedureIfExists();
        await createGetTopProductsByProvinceProcedure();
        console.log('‚úÖ GetTopProductsByProvince procedure ready');

        await dropGetTopProductsByDistrictProcedureIfExists();
        await createGetTopProductsByDistrictProcedure();
        console.log('‚úÖ GetTopProductsByDistrict procedure ready');

        await dropGetPopularProvincesProcedureIfExists();
        await createGetPopularProvincesProcedure();
        console.log('‚úÖ GetPopularProvinces procedure ready');

        await dropGetPopularDistrictsProcedureIfExists();
        await createGetPopularDistrictsProcedure();
        console.log('‚úÖ GetPopularDistricts procedure ready');

        await dropSearchProvincesProcedureIfExists();
        await createSearchProvincesProcedure();
        console.log('‚úÖ SearchProvinces procedure ready');

        await dropSearchDistrictsProcedureIfExists();
        await createSearchDistrictsProcedure();
        console.log('‚úÖ SearchDistricts procedure ready');

        await dropSearchProductIDFromUIDProcedureIfExists();
        await createSearchProductIDFromUIDProcedure();
        console.log('‚úÖ SearchProductIDFromUID procedure ready');

        await dropGetAllProvincesProcedureIfExists();
        await createGetAllProvincesProcedure();
        console.log('‚úÖ GetAllProvinces procedure ready');

        await dropGetAllDistrictsProcedureIfExists();
        await createGetAllDistrictsProcedure();
        console.log('‚úÖ GetAllDistricts procedure ready');

        await dropRotateMonthPartitionsProcedureIfExists();
        await createRotateMonthPartitionsProcedure(pool);
        console.log('‚úÖ RotateMonthPartitions procedure ready');

        await pool.execute('CALL RotateMonthPartitions(NULL, ?, ?)', ['Calendar', 12]);
        console.log('‚úÖ Initial partition rotation for Calendar table completed');

        await dropAddCalendarForRoomProcedureIfExists();
        await createAddCalendarForRoomProcedure();
        console.log('‚úÖ AddCalendarForRoom procedure ready');

        await dropSpPlaceBookingDraftIfExists();
        await createSpPlaceBookingDraft();
        console.log('‚úÖ sp_place_booking_draft procedure ready');

        console.log('\nüéâ Database schema initialization completed successfully!');
        
    } catch (error) {
        console.error('\n‚ùå Error during database schema initialization:', error);
        throw error;
    }
}

initSchema();

module.exports = pool;